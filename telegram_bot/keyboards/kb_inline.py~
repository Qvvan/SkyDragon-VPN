from enum import Enum
from typing import Optional

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.context_manager import DatabaseContextManager
from logger.logging_config import logger
from models.models import NameApp, SubscriptionStatusEnum, Subscriptions


class ServerCallbackData(CallbackData, prefix="server_disable"):
    action: str
    server_ip: str


class ChangeUserSubCallback(CallbackData, prefix="change_user_sub"):
    action: str
    subscription_id: int
    user_id: Optional[int] = None
    server_ip: Optional[str] = None


class UserPaginationCallback(CallbackData, prefix="user"):
    page: int
    action: str


class UserSelectCallback(CallbackData, prefix="user_select"):
    action: str
    user_id: int


class ServiceCallbackFactory(CallbackData, prefix='service'):
    service_id: str
    status_pay: str
    subscription_id: Optional[int] = None


class UserInfoCallbackFactory(CallbackData, prefix='info'):
    action: str
    user_id: Optional[int] = None
    ban: Optional[bool] = None
    trial: Optional[bool] = None


class SubscriptionCallbackFactory(CallbackData, prefix="subscription"):
    action: str
    subscription_id: Optional[int] = None
    back: Optional[str] = None
    status_pay: Optional[str] = None


class InstallProfileCallbackFactory(CallbackData, prefix="install_profile"):
    action: str
    subscription_id: Optional[int] = None
    name_device: Optional[str] = None


class ReplaceServerCallbackFactory(CallbackData, prefix="serv"):
    action: str
    subscription_id: Optional[int] = None
    server_ip: str


class ServerSelectCallback(CallbackData, prefix="servers"):
    server_ip: str
    server_name: str


class StarsPayCallbackFactory(CallbackData, prefix="stars_pay"):
    action: str
    service_id: str
    subscription_id: Optional[int] = None
    status_pay: str


class GuideSelectCallback(CallbackData, prefix="guide"):
    action: str
    name_oc: str
    name_app: str


class DefaultCallback(CallbackData, prefix="default"):
    action: str
    back: str


class StatusPay(Enum):
    NEW = "new"
    OLD = "old"


class AutoRenewalCallbackFactory(CallbackData, prefix="auto_renewal"):
    action: str
    auto_renewal_enabled: Optional[bool] = None
    subscription_id: Optional[int] = None


class InlineKeyboards:
    @staticmethod
    async def create_order_keyboards(status_pay: StatusPay, back_target: str = None,
                                     subscription_id: int = None) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏."""
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                services = await session_methods.services.get_services()
                buttons: list[InlineKeyboardButton] = []

                for service in services:
                    service_id = str(service.service_id)
                    service_name = service.name
                    if service.duration_days > 30:
                        continue

                    callback_data = ServiceCallbackFactory(
                        service_id=service_id,
                        status_pay=status_pay.value,
                        subscription_id=subscription_id
                    ).pack()

                    buttons.append(InlineKeyboardButton(text=service_name, callback_data=callback_data))
                keyboard.row(*buttons)

                if back_target:
                    keyboard.row(
                        InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=back_target)
                    )
                else:
                    keyboard.row(
                        InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                    )

                return keyboard.as_markup()
            except Exception as e:
                await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)

    @staticmethod
    async def get_servers(ip, subscription_id) -> InlineKeyboardMarkup | int:
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                servers = await session_methods.servers.get_all_servers()
                buttons: list[InlineKeyboardButton] = []

                for server in servers:
                    if server.hidden == 1:
                        continue
                    server_ip = server.server_ip
                    server_name = server.name

                    callback_data = ServerSelectCallback(
                        server_ip=server_ip,
                        server_name=server_name
                    ).pack()

                    buttons.append(InlineKeyboardButton(
                        text=server_name if server_ip != ip else server_name + "(–¢–µ–∫—É—â–∏–π)",
                        callback_data=callback_data))

                if len(buttons) == 0:
                    return 0
                keyboard.row(*buttons)

                keyboard.row(
                    InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'view_details_{subscription_id}')
                )

                keyboard.adjust(1)

                return keyboard.as_markup()
            except Exception as e:
                await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)

    @staticmethod
    async def create_pay(callback_data, price) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {price} ‚≠êÔ∏è", pay=True)
        keyboard.button(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=ServiceCallbackFactory(
                service_id=callback_data.service_id,
                status_pay=callback_data.status_pay
            ).pack()
        )

        keyboard.adjust(1, 2)

        return keyboard.as_markup()

    @staticmethod
    async def payment_method(callback_data, subscription_id: int = None, back_target: str = "main_menu"):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí≥ –ö–∞—Ä—Ç–æ–π",
                    callback_data=StarsPayCallbackFactory(
                        action="card_pay",
                        service_id=callback_data.service_id,
                        subscription_id=subscription_id,
                        status_pay=callback_data.status_pay
                    ).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è",
                    url="https://telegra.ph/Oferta-na-predostavlenie-uslug-VPN-01-04"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=SubscriptionCallbackFactory(
                        action='extend_subscription',
                        subscription_id=subscription_id,
                        back=back_target,
                        status_pay=callback_data.status_pay
                    ).pack() if subscription_id else "subscribe"
                )
            ]
        ])
        return keyboard

    @staticmethod
    async def get_support(callback_data: str = None) -> InlineKeyboardMarkup:
        support_user_id = "SkyDragonSupport"
        support_link = f"t.me/{support_user_id}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    url=support_link
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìú –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                    callback_data="faq"
                )
            ]
        ])
        if callback_data:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=callback_data
                )
            ])
        else:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data='back_to_start'
                )
            ])

        return keyboard

    @staticmethod
    async def cancel() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel'))
        return keyboard.as_markup()

    @staticmethod
    async def menu_subs(subscription_id, auto_renewal, back_button="main_menu"):
        async with DatabaseContextManager() as session_methods:
            try:
                keyboard = InlineKeyboardBuilder()
                subscription = await session_methods.subscription.get_subscription_by_id(subscription_id)
                if subscription.status == SubscriptionStatusEnum.ACTIVE:
                    keyboard.add(
                        InlineKeyboardButton(
                            text='‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å',
                            callback_data=SubscriptionCallbackFactory(
                                action='extend_subscription',
                                subscription_id=subscription_id,
                                back=f"view_details_{subscription_id}"
                            ).pack()),
                        InlineKeyboardButton(
                            text='üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
                            callback_data=SubscriptionCallbackFactory(
                                action='get_guide_install_app',
                                subscription_id=subscription_id,
                            ).pack()),
                        InlineKeyboardButton(
                            text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
                            callback_data="history_payments"
                        ),
                        InlineKeyboardButton(
                            text='üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ',
                            callback_data=AutoRenewalCallbackFactory(
                                action='auto_renewal',
                                auto_renewal_enabled=auto_renewal,
                                subscription_id=subscription_id,
                            ).pack()),
                        InlineKeyboardButton(
                            text='üßë‚Äçüíª –û–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö',
                            callback_data="online",
                        ),
                        InlineKeyboardButton(
                            text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="main_menu",
                        )
                    )
                keyboard.adjust(2, 1)

                return keyboard.as_markup()
            except Exception as e:
                await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π', e)

    @staticmethod
    async def create_user_pagination_with_users_keyboard(users, page: int, has_next: bool) -> InlineKeyboardMarkup:
        buttons = [[
            InlineKeyboardButton(text="Add all ‚úÖ", callback_data="add_all_users"),
            InlineKeyboardButton(text="Add subs ‚úÖ", callback_data="add_active_users")
        ]]

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            buttons.append([InlineKeyboardButton(
                text=f"{user['username']} ({user['user_id']}) {'‚úÖ' if user['selected'] else ''}",
                callback_data=UserSelectCallback(
                    action="select",
                    user_id=user['user_id']).pack()
            )])

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_buttons = [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                 callback_data=UserPaginationCallback(
                                     page=page,
                                     action="previous").pack()) if page > 1 else InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="noop"),
            InlineKeyboardButton(text=f"{page}", callback_data="noop"),
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=UserPaginationCallback(
                    page=page,
                    action="next")
                .pack()) if has_next else InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="noop"),
        ]
        pagination_buttons = [button for button in pagination_buttons if button is not None]

        buttons.append(pagination_buttons)

        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ—Ö ‚ùå", callback_data="cancel_all")])
        buttons.append([InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")])
        buttons.append([InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')])

        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    async def show_notify_change_cancel() -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        edit_message = InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_message")
        send_notification = InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="send_notification")
        cancel_button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel')

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        keyboard.add(edit_message, send_notification)
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        keyboard.add(cancel_button)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞: –º–∞–∫—Å–∏–º—É–º –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        keyboard.adjust(2)

        return keyboard.as_markup()

    @staticmethod
    async def replace_app(name_app, subscription_id) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if name_app == NameApp.OUTLINE:
            button = InlineKeyboardButton(text="VLESS", callback_data=SubscriptionCallbackFactory(
                action='name_app', name_app="VLESS").pack())
        else:
            button = InlineKeyboardButton(text="OUTLINE", callback_data=SubscriptionCallbackFactory(
                action='name_app', name_app="OUTLINE").pack())
        keyboard.add(button)
        keyboard.row(
            InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=f'view_details_{subscription_id}')
        )

        return keyboard.as_markup()

    @staticmethod
    async def server_management_options(server_ip, hidden_status) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if hidden_status == 0:
            show_status = InlineKeyboardButton(
                text="–í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                callback_data=ServerCallbackData(
                    action="disable",
                    server_ip=server_ip
                ).pack()
            )
        else:
            show_status = InlineKeyboardButton(
                text="–í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                callback_data=ServerCallbackData(
                    action="enable",
                    server_ip=server_ip
                ).pack()
            )
        server_name = InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
            callback_data=ServerCallbackData(
                action="change_name",
                server_ip=server_ip
            ).pack()
        )
        server_limit = InlineKeyboardButton(
            text="–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç",
            callback_data=ServerCallbackData(
                action="change_limit",
                server_ip=server_ip
            ).pack()
        )
        keyboard.add(show_status, server_name, server_limit)

        return keyboard.as_markup()

    @staticmethod
    async def get_trial_subscription_keyboard():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚öîÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="activate_trial"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è",
                    url="https://telegra.ph/Oferta-na-predostavlenie-uslug-VPN-01-04"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_start"
                )
            ]
        ])
        return keyboard

    @staticmethod
    async def get_subscriptions_keyboard():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üêâ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                    callback_data="view_subs"
                )
            ]
        ])
        return keyboard

    @staticmethod
    async def get_menu_keyboard():
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üê≤ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                    callback_data="trial_subs"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ],
        ],
        )
        return keyboard

    @staticmethod
    async def get_invite_keyboard(callback_data: str = None):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üê≤ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è",
                    callback_data="show_referrals"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
                    callback_data="get_invite_link"
                )
            ]
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ callback_data
        if callback_data:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=callback_data
                )
            ])

        return keyboard

    @staticmethod
    async def get_back_to_faq_keyboard(faq_key):
        if faq_key in ["faq_change_app", "faq_change_territory", "faq_slow_internet"]:
            return InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üêâ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                        callback_data="view_subs"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é FAQ",
                        callback_data="faq"
                    )
                ]
            ])
        elif faq_key == 'faq_install_amulet':
            return InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üêâ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                        callback_data="view_subs"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é FAQ",
                        callback_data="faq"
                    )
                ]
            ])
        elif faq_key == 'faq_payment':
            return InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="subscribe"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é FAQ",
                        callback_data="faq"
                    )
                ]
            ])

    @staticmethod
    async def get_faq_keyboard():
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üåç –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é",
                    callback_data="faq_change_territory"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="faq_payment"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ö° VPN –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    callback_data="faq_slow_internet"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîÆ –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                    callback_data="faq_install_amulet"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="support_callback"
                )
            ]
        ])

    @staticmethod
    async def get_menu_install_app(subscription_id) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="Android üì±",
                    callback_data=SubscriptionCallbackFactory(
                        action='Android',
                        subscription_id=subscription_id,
                    ).pack()),
                InlineKeyboardButton(
                    text="iPhone üçè",
                    callback_data=SubscriptionCallbackFactory(
                        action='iPhone',
                        subscription_id=subscription_id,
                    ).pack())
            ],
            [
                InlineKeyboardButton(
                    text="Windows üíª",
                    callback_data=SubscriptionCallbackFactory(
                        action='Windows',
                        subscription_id=subscription_id,
                    ).pack()),
                InlineKeyboardButton(
                    text="MacOS üíª",
                    callback_data=SubscriptionCallbackFactory(
                        action='MacOS',
                        subscription_id=subscription_id,
                    ).pack())
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=f"view_details_{subscription_id}")
            ],
        ])
        return keyboard

    @staticmethod
    async def user_info(user_id, ban, trial):
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–†–∞–∑–±–∞–Ω–∏—Ç—å" if ban else "–ó–∞–±–∞–Ω–∏—Ç—å",
                    callback_data=UserInfoCallbackFactory(
                        action="user_ban",
                        user_id=user_id,
                        ban=not ban
                    ).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û–±–Ω–æ–≤–∏—Ç—å",
                    callback_data=UserInfoCallbackFactory(
                        action="user_trial",
                        user_id=user_id,
                        trial=not trial
                    ).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    callback_data=UserSelectCallback(
                        action='user_subs_info',
                        user_id=user_id
                    ).pack()
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    callback_data="cancel"
                )
            ]
        ])

    @staticmethod
    async def sub_info(user_id: int, sub: Subscriptions):
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É",
                    callback_data=ChangeUserSubCallback(
                        action='change_date_sub',
                        subscription_id=sub.subscription_id,
                        user_id=user_id,
                    ).pack())
            ],
            [
                InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data=ChangeUserSubCallback(
                        action='delete_sub',
                        subscription_id=sub.subscription_id,
                        user_id=user_id
                    ).pack())
            ],
            [
                InlineKeyboardButton(
                    text="–í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ",
                    callback_data=ChangeUserSubCallback(
                        action='change_expire_sub',
                        subscription_id=sub.subscription_id
                    ).pack())
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    callback_data='cancel'
                )
            ],
        ])

    @staticmethod
    async def main_menu():
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üêâ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                    callback_data="view_subs"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="subscribe"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè∞ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
                    callback_data="back_to_call_allies"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="gift_sub"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üßô‚Äç‚ôÇÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                    callback_data="help_wizards_callback"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–∞–≤–∏–ª–∞ –∏ —É—Å–ª–æ–≤–∏—è",
                    url="https://telegra.ph/Oferta-na-predostavlenie-uslug-VPN-01-04"
                )
            ],
        ]
        )

    @staticmethod
    async def get_user_info(user_id: int):
        try:
            user_link = f"tg://user?id={user_id}"
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                            url=user_link
                        )
                    ]
                ]
            )
            return keyboard
        except Exception as e:
            await logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", e)
            return None

    @staticmethod
    async def create_or_extend(subscription_id: int = None):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                        callback_data=SubscriptionCallbackFactory(
                            action='extend_subscription',
                            subscription_id=subscription_id,
                            back="subscribe"
                        ).pack() if subscription_id else "view_subs"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data=DefaultCallback(
                            action='create_order',
                            back="subscribe"
                        ).pack()
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data='main_menu'
                    )
                ]
            ]
        )
        return keyboard
