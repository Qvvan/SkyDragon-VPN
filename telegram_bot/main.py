import asyncio
import atexit
import signal
import sys

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

from config_data import config
from database.init_db import DataBase
from handlers.admin import add_server, user_info, cancel, pushes, show_servers, get_user_id, \
    add_gift, message_for_user, new_keys
from handlers.services import guide_install, trial_subscription
from handlers.services.card_service import payment_status_checker
from handlers.services.ssh_tunnel_manager import SSHTunnelManager
from handlers.user import start, support, createorder, online_users_vpn, legend
from handlers.user import subs, referrer, menu, just_message, gift_sub, \
    send_stikers, history_payments
from logger.logging_config import logger
from middleware.logging_middleware import CallbackLoggingMiddleware, MessageLoggingMiddleware
from middleware.trottling import ThrottlingMiddleware
from scripts import update_keys
from utils.check_servers import ping_servers
from utils.gift_checker import run_gift_checker
from utils.subscription_checker import run_checker
from utils.trial_checker import run_trial_checker

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
bot_instance = None
dp_instance = None
background_tasks = []
is_shutting_down = False


def cleanup_tunnels():
    """–û—á–∏—Å—Ç–∫–∞ SSH —Ç—É–Ω–Ω–µ–ª–µ–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
    tunnel_manager = SSHTunnelManager()
    tunnel_manager.cleanup()


async def cleanup_bot_resources():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–æ—Ç–∞."""
    global bot_instance, dp_instance, background_tasks, is_shutting_down

    is_shutting_down = True

    # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    for task in background_tasks:
        if not task.done():
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

    background_tasks.clear()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
    if bot_instance and bot_instance.session:
        await bot_instance.session.close()

    cleanup_tunnels()


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    print(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    sys.exit(0)


async def on_startup(bot: Bot):
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    for admin_id in config.ADMIN_IDS:
        try:
            await bot.send_message(admin_id, "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            await logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}", e)


async def on_shutdown(bot: Bot):
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    if not is_shutting_down:
        for admin_id in config.ADMIN_IDS:
            try:
                await bot.send_message(admin_id, "üî¥ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
            except Exception as e:
                await logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}", e)


def setup_routers(dp: Dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–∂–µ —Ä–æ—É—Ç–µ—Ä—ã
    routers_to_include = [
        user_info.router,
        legend.router,
        send_stikers.router,
        history_payments.router,
        cancel.router,
        menu.router,
        createorder.router,
        subs.router,
        start.router,
        support.router,
        guide_install.router,
        referrer.router,
        trial_subscription.router,
        gift_sub.router,
        update_keys.router,
        online_users_vpn.router,
        new_keys.router,
        add_server.router,
        pushes.router,
        show_servers.router,
        get_user_id.router,
        add_gift.router,
        message_for_user.router,
        just_message.router
    ]

    for router in routers_to_include:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if router.parent_router is not None:
            router.parent_router = None

        dp.include_router(router)


async def setup_background_tasks(bot: Bot):
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."""
    global background_tasks

    # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    for task in background_tasks:
        if not task.done():
            task.cancel()

    background_tasks.clear()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    background_tasks.extend([
        asyncio.create_task(run_checker(bot)),
        asyncio.create_task(ping_servers(bot)),
        asyncio.create_task(payment_status_checker(bot)),
        asyncio.create_task(run_trial_checker(bot)),
        asyncio.create_task(run_gift_checker(bot))
    ])


async def create_bot_instance():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    global bot_instance, dp_instance

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    if bot_instance and bot_instance.session:
        await bot_instance.session.close()

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = DataBase()
    await db.create_db()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    storage = MemoryStorage()

    bot_instance = Bot(
        token=config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

    dp_instance = Dispatcher(storage=storage)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
    dp_instance.message.outer_middleware(MessageLoggingMiddleware())
    dp_instance.callback_query.outer_middleware(CallbackLoggingMiddleware())

    throttling_middleware = ThrottlingMiddleware(limit=0.3)
    dp_instance.message.outer_middleware(throttling_middleware)
    dp_instance.callback_query.outer_middleware(throttling_middleware)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    dp_instance.startup.register(on_startup)
    dp_instance.shutdown.register(on_shutdown)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    setup_routers(dp_instance)

    return bot_instance, dp_instance


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞."""
    global bot_instance, dp_instance, is_shutting_down

    await logger.info('üöÄ Starting bot')

    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        bot, dp = await create_bot_instance()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        await setup_background_tasks(bot)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º cleanup –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(cleanup_tunnels)

        # –£–¥–∞–ª—è–µ–º webhook —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await bot.delete_webhook(drop_pending_updates=True, request_timeout=30)
        except Exception as e:
            await logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook", e)
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await logger.info('‚úÖ Bot started successfully')
        await dp.start_polling(bot, handle_signals=False)

    except Exception as e:
        await logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main()", e)
        raise
    finally:
        if not is_shutting_down:
            await cleanup_bot_resources()


async def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º."""
    restart_count = 0
    max_restarts = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –ø–æ–¥—Ä—è–¥
    base_delay = 5

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    while restart_count < max_restarts:
        try:
            await main()
            # –ï—Å–ª–∏ –¥–æ–±—Ä–∞–ª–∏—Å—å —Å—é–¥–∞ –±–µ–∑ –æ—à–∏–±–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            restart_count = 0

        except KeyboardInterrupt:
            await logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break

        except Exception as e:
            restart_count += 1
            delay = min(base_delay * restart_count, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥

            await logger.error(f"üí• –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –æ—à–∏–±–∫–æ–π (–ø–æ–ø—ã—Ç–∫–∞ {restart_count}/{max_restarts})", e)

            if restart_count >= max_restarts:
                await logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                break

            await logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(delay)

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    await cleanup_bot_resources()
    await logger.info("üèÅ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        cleanup_tunnels()