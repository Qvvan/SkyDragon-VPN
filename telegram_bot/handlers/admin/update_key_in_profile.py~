from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from config_data.config import ADMIN_IDS
from database.context_manager import DatabaseContextManager
from filters.admin import IsAdmin
from handlers.services.key_create import VlessKeyManager, ShadowsocksKeyManager
from logger.logging_config import logger
from models.models import Keys, NameApp

router = Router()

NEW_SERVER_IP = "109.120.187.33"
SERVER_NAME = "üá´üáÆ –§–∏–Ω–ª—è–Ω–¥–∏—è"


@router.message(Command(commands="update_profile"), IsAdmin(ADMIN_IDS))
async def update_profile(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–±–∞–≤–ª—è—è –∫–ª—é—á–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞."""

    processed_count = 0
    error_count = 0

    async with DatabaseContextManager() as session_methods:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ (–∏—Å–∫–ª—é—á–∞—è –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä)
            existing_keys = await session_methods.keys.get_all_keys()
            existing_key_ids = {
                key.id for key in existing_keys
                if key.server_ip != NEW_SERVER_IP
            }

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î
            subscriptions = await session_methods.subscription.get_subs()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

            # ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLAlchemy –æ–±—ä–µ–∫—Ç–æ–≤ –î–û —Ü–∏–∫–ª–∞
            subscription_data = []
            for sub in subscriptions:
                subscription_data.append({
                    'subscription_id': sub.subscription_id,
                    'user_id': sub.user_id,
                    'key_ids': list(sub.key_ids) if sub.key_ids else []
                })

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for sub_data in subscription_data:
                try:
                    result = await _process_subscription(session_methods, sub_data, existing_key_ids)
                    if result:
                        processed_count += 1
                except Exception as e:
                    error_count += 1
                    # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ dict
                    await logger.log_error(
                        f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {sub_data['subscription_id']}",
                        e
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
            await message.answer(
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}\n"
                f"‚Ä¢ –û—à–∏–±–æ–∫: {error_count}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscription_data)}"
            )

        except Exception as e:
            await logger.log_error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ update_profile", e)
            await message.answer(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def _process_subscription(session_methods, sub_data: dict, existing_key_ids) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ dict –≤–º–µ—Å—Ç–æ SQLAlchemy –æ–±—ä–µ–∫—Ç–∞.

    Args:
        sub_data: dict —Å –ø–æ–ª—è–º–∏ subscription_id, user_id, key_ids

    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
    """
    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ dict - –Ω–∏–∫–∞–∫–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ SQLAlchemy –æ–±—ä–µ–∫—Ç–∞–º
    user_id = sub_data['user_id']
    subscription_id = sub_data['subscription_id']
    current_key_ids = sub_data['key_ids']

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–ª—é—á–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        user_has_new_server_keys = any(
            key_id not in existing_key_ids
            for key_id in current_key_ids
        )

        if user_has_new_server_keys:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –∫–ª—é—á–∏ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –°–í–ï–ñ–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º
        user = await session_methods.users.get_user(user_id=user_id)
        if not user:
            await logger.log_error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", None)
            return False

        # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        new_key_ids = await _create_server_keys(
            session_methods,
            user_id=user_id,
            username=user.username
        )

        if not new_key_ids:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        updated_key_ids = current_key_ids + new_key_ids

        await session_methods.subscription.update_sub(
            subscription_id=subscription_id,
            key_ids=updated_key_ids
        )

        # ‚úÖ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await session_methods.session.commit()
        logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True

    except Exception as e:
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session_methods.session.rollback()
        await logger.log_error(
            f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
            e
        )
        return False


async def _create_server_keys(session_methods, user_id: int, username: str) -> list[int]:
    """–°–æ–∑–¥–∞—ë—Ç VLESS –∏ Shadowsocks –∫–ª—é—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    created_key_ids = []

    try:
        # –°–æ–∑–¥–∞—ë–º VLESS –∫–ª—é—á
        vless_key_id = await _create_vless_key(session_methods, user_id, username)
        if vless_key_id:
            created_key_ids.append(vless_key_id)

        # –°–æ–∑–¥–∞—ë–º Shadowsocks –∫–ª—é—á
        shadowsocks_key_id = await _create_shadowsocks_key(session_methods, user_id, username)
        if shadowsocks_key_id:
            created_key_ids.append(shadowsocks_key_id)

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(created_key_ids)} –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", e)

    return created_key_ids


async def _create_vless_key(session_methods, user_id: int, username: str) -> int | None:
    """–°–æ–∑–¥–∞—ë—Ç VLESS –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        vless_manager = VlessKeyManager(NEW_SERVER_IP)
        key, key_id, email = await vless_manager.manage_vless_key(
            tg_id=str(user_id),
            username=username,
            server_name=SERVER_NAME
        )

        vless_key_record = await session_methods.keys.add_key(
            Keys(
                key_id=key_id,
                key=key,
                email=email,
                server_ip=NEW_SERVER_IP,
                name_app=NameApp.VLESS
            )
        )

        return vless_key_record.id

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è VLESS –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", e)
        return None


async def _create_shadowsocks_key(session_methods, user_id: int, username: str) -> int | None:
    """–°–æ–∑–¥–∞—ë—Ç Shadowsocks –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        shadowsocks_manager = ShadowsocksKeyManager(NEW_SERVER_IP)
        key, key_id, email = await shadowsocks_manager.manage_shadowsocks_key(
            tg_id=user_id,
            username=username,
            server_name=SERVER_NAME
        )

        shadowsocks_key_record = await session_methods.keys.add_key(
            Keys(
                key_id=key_id,
                key=key,
                email=email,
                server_ip=NEW_SERVER_IP,
                name_app=NameApp.OUTLINE
            )
        )

        return shadowsocks_key_record.id

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Shadowsocks –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", e)
        return None