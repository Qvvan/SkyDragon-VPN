import json

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from config_data.config import ADMIN_IDS, PORT_X_UI, MY_SECRET_URL
from database.context_manager import DatabaseContextManager
from filters.admin import IsAdmin
from handlers.services.key_create import BaseKeyManager
from logger.logging_config import logger
from models.models import NameApp

router = Router()


class VlessKeyUpdater:
    def __init__(self, server_ip: str, server_name: str):
        self.server_ip = server_ip
        self.base_url = f"https://{server_ip}:{PORT_X_UI}/{MY_SECRET_URL}/panel"
        self.server_name = server_name

    def generate_vless_link(self, client_id, port, short_id, public_key, server_name):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π VLESS URL."""
        return (f"vless://{client_id}@{self.server_ip}:{port}"
                f"?type=tcp&security=reality&pbk={public_key}"
                f"&fp=chrome&sni=github.com&sid={short_id}&flow=xtls-rprx-vision"
                f"#{server_name} - VLESS")


@router.message(Command(commands="update_vless_keys"), IsAdmin(ADMIN_IDS))
async def update_vless_keys_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö VLESS –∫–ª—é—á–µ–π –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö."""

    await message.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VLESS –∫–ª—é—á–µ–π –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö...")

    async with DatabaseContextManager() as session_methods:
        try:
            keys = await session_methods.keys.get_all_keys()
            for key in keys:
                try:
                    async with DatabaseContextManager() as session:
                        if "github" in key.key:
                            continue

                        if key.name_app != "Vless":
                            continue

                        await logger.info("–í–æ—Ç —Ç–∞–∫–æ–π –∫–ª—é—á –º—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + key.key)

                        server = await session.servers.get_server_by_ip(key.server_ip)
                        get_inbound = await BaseKeyManager(key.server_ip).get_inbound_by_id(key.key_id)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ get_inbound –Ω–µ None –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                        if not get_inbound or not get_inbound.get("success") or not get_inbound.get("obj"):
                            await logger.warning(f"Inbound –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        inbound_obj = get_inbound["obj"]
                        if inbound_obj.get("protocol") != "vless":
                            continue

                        # –ü–∞—Ä—Å–∏–º settings –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è client_id
                        settings_str = inbound_obj.get("settings", "")
                        if not settings_str:
                            await logger.warning(f"–ù–µ—Ç settings –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        settings = json.loads(settings_str)
                        if not settings.get("clients"):
                            await logger.warning(f"–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        client_id = settings["clients"][0]["id"]

                        # –ü–∞—Ä—Å–∏–º streamSettings –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Reality
                        stream_settings_str = inbound_obj.get("streamSettings", "")
                        if not stream_settings_str:
                            await logger.warning(f"–ù–µ—Ç streamSettings –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        stream_settings = json.loads(stream_settings_str)
                        reality_settings = stream_settings.get("realitySettings", {})

                        if not reality_settings.get("shortIds"):
                            await logger.warning(f"–ù–µ—Ç shortIds –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        short_id = reality_settings["shortIds"][0]

                        reality_inner_settings = reality_settings.get("settings", {})
                        public_key = reality_inner_settings.get("publicKey")

                        if not public_key:
                            await logger.warning(f"–ù–µ—Ç publicKey –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç
                        port = inbound_obj.get("port")
                        if not port:
                            await logger.warning(f"–ù–µ—Ç –ø–æ—Ä—Ç–∞ –¥–ª—è –∫–ª—é—á–∞ {key.key_id}")
                            continue

                        # –°–æ–∑–¥–∞–µ–º updater –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
                        updater = VlessKeyUpdater(key.server_ip, server.name)
                        vless_link = updater.generate_vless_link(
                            client_id, port, short_id, public_key, server.name
                        )

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ
                        await session.keys.update_key_by_key_id(key.key_id, key=vless_link)
                        await session.session.commit()

                        await logger.info(f"–ö–ª—é—á {key.key_id} –æ–±–Ω–æ–≤–ª–µ–Ω, –≤ –±–¥ ID {key.id}")

                except Exception as e:
                    await logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª—é—á–∞ {key.key_id}:", e)
                    continue

            await message.answer("‚úÖ –í—Å–µ VLESS –∫–ª—é—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

        except Exception as e:
            await logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π:", e)
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
