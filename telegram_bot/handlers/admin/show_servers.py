from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config_data.config import PORT_X_UI, MY_SECRET_URL
from database.context_manager import DatabaseContextManager
from handlers.services.get_session_cookies import get_session_cookie
from keyboards.kb_inline import InlineKeyboards, ServerCallbackData
from logger.logging_config import logger
from state.state import ServerManagementStates

router = Router()


@router.message(Command(commands="show_servers"))
async def show_servers_handler(message: types.Message):
    async with DatabaseContextManager() as session_methods:
        try:
            servers = await session_methods.servers.get_all_servers()
        except Exception as e:
            await logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", e)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤.")
            return

    for server in servers:
        reachable = await get_session_cookie(server.server_ip)
        status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if reachable else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        hidden_status = "üü¢ –í–∫–ª—é—á–µ–Ω" if server.hidden == 0 else "üî¥ –í—ã–∫–ª—é—á–µ–Ω"

        text = (
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server.name} üìå\n"
            f"IP: {server.server_ip} üåê\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–í –ë–î: {hidden_status}\n"
            f"[–ü–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–∞](https://{server.server_ip}:{PORT_X_UI}/{MY_SECRET_URL}/panel/)"
        )

        await message.answer(
            text=text,
            reply_markup=await InlineKeyboards.server_management_options(server.server_ip, server.hidden),
            parse_mode="Markdown"
        )


@router.callback_query(ServerCallbackData.filter(F.action == "change_name"))
async def change_server_name_callback_handler(callback_query: types.CallbackQuery, callback_data: ServerCallbackData,
                                              state: FSMContext):
    server_ip = callback_data.server_ip

    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å IP: {server_ip}")
    await state.update_data(server_ip=server_ip)
    await state.set_state(ServerManagementStates.waiting_for_name)


@router.message(ServerManagementStates.waiting_for_name)
async def receive_new_server_name(message: types.Message, state: FSMContext):
    new_name = message.text
    state_data = await state.get_data()
    server_ip = state_data['server_ip']

    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.servers.update_server(server_ip, name=new_name)
            await message.answer(f"–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ —Å IP: {server_ip} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name}.")
            await logger.info(f"–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ {server_ip} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_name} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ —Å IP: {server_ip}.")
            await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}", e)

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
@router.callback_query(ServerCallbackData.filter(F.action == "change_limit"))
async def change_server_limit_callback_handler(callback_query: types.CallbackQuery, callback_data: ServerCallbackData,
                                               state: FSMContext):
    server_ip = callback_data.server_ip

    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å IP: {server_ip}")
    await state.update_data(server_ip=server_ip)
    await state.set_state(ServerManagementStates.waiting_for_limit)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
@router.message(ServerManagementStates.waiting_for_limit)
async def receive_new_server_limit(message: types.Message, state: FSMContext):
    try:
        new_limit = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–∏–º–∏—Ç–∞.")
        return

    state_data = await state.get_data()
    server_ip = state_data['server_ip']

    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.servers.update_server(server_ip, limit=new_limit)
            await message.answer(f"–õ–∏–º–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å IP: {server_ip} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit}.")
            await logger.info(f"–õ–∏–º–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ {server_ip} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except Exception as e:
            await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å IP: {server_ip}.")
            await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}", e)

    await state.clear()


@router.callback_query(ServerCallbackData.filter(F.action == "disable"))
async def disable_server_callback_handler(callback_query: types.CallbackQuery, callback_data):
    server_ip = callback_data.server_ip
    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.servers.update_server(server_ip, hidden=1)
            await callback_query.answer(f"–°–µ—Ä–≤–µ—Ä {server_ip} —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω.", show_alert=True)
            await logger.info(f"–°–µ—Ä–≤–µ—Ä {server_ip} –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ –ë–î
            updated_text = callback_query.message.text.replace("üü¢ –í–∫–ª—é—á–µ–Ω", "üî¥ –í—ã–∫–ª—é—á–µ–Ω")
            updated_keyboard = await InlineKeyboards.server_management_options(server_ip, hidden_status=1)
            await callback_query.message.edit_text(text=updated_text, reply_markup=updated_keyboard)

        except Exception as e:
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {server_ip}.", show_alert=True)
            await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}", e)


@router.callback_query(ServerCallbackData.filter(F.action == "enable"))
async def enable_server_callback_handler(callback_query: types.CallbackQuery, callback_data):
    server_ip = callback_data.server_ip
    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.servers.update_server(server_ip, hidden=0)
            await callback_query.answer(f"–°–µ—Ä–≤–µ—Ä {server_ip} —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω.", show_alert=True)
            await logger.info(f"–°–µ—Ä–≤–µ—Ä {server_ip} –±—ã–ª –≤–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –≤ –ë–î
            updated_text = callback_query.message.text.replace("üî¥ –í—ã–∫–ª—é—á–µ–Ω", "üü¢ –í–∫–ª—é—á–µ–Ω")
            updated_keyboard = await InlineKeyboards.server_management_options(server_ip, hidden_status=0)
            await callback_query.message.edit_text(text=updated_text, reply_markup=updated_keyboard)

        except Exception as e:
            await callback_query.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä {server_ip}.", show_alert=True)
            await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}", e)
