from aiogram import Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from database.context_manager import DatabaseContextManager
from keyboards.kb_inline import UserPaginationCallback, InlineKeyboards, UserSelectCallback
from logger.logging_config import logger

router = Router()


@router.message(Command(commands="pushes"))
async def start_broadcast(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."""
    async with DatabaseContextManager() as session_methods:
        try:
            users = await session_methods.users.get_all_users()
            print(users)
            users_dict = {user.user_id: {'user_id': user.user_id, 'username': user.username, 'selected': False} for user in
                          users}
            print('–Ω–∞—à –¥–∏–∫—Ç', users_dict)
            await state.update_data(users=users_dict)
        except Exception as e:
            await logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ pushes', e)
    page = 1
    await show_users(message, page, users_dict)


@router.callback_query(UserSelectCallback.filter())
async def select_user(callback_query: types.CallbackQuery, callback_data: UserSelectCallback, state: FSMContext):
    try:
        data = await state.get_data()
        users_dict = data.get('users', {})
        user_id = callback_data.user_id
        if user_id in users_dict:
            users_dict[user_id]['selected'] = not users_dict[user_id]['selected']
            await state.update_data(users=users_dict)
        page = (list(users_dict.keys()).index(user_id) // 5) + 1
        await show_users(callback_query.message, page, users_dict)
        await callback_query.answer()
        await state.update_data(current_page=page)
    except Exception as e:
        await logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', e)


@router.callback_query(lambda call: call.data in ['add_all_users', 'add_active_users', 'cancel_all'])
async def handle_special_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    users_dict = data.get('users', {})
    if callback_query.data == 'add_all_users':
        for user in users_dict.values():
            user['selected'] = True
    elif callback_query.data == 'add_active_users':
        async with DatabaseContextManager() as session_methods:
            active_user_ids = await session_methods.subscription.get_active_subscribed_users()
        for user_id, user in users_dict.items():
            user['selected'] = user_id in active_user_ids
    elif callback_query.data == 'cancel_all':
        for user in users_dict.values():
            user['selected'] = False
    await state.update_data(users=users_dict)
    page = 1
    await show_users(callback_query.message, page, users_dict)
    await callback_query.answer()


@router.callback_query(lambda call: call.data == 'save')
async def handle_save_button(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    users_dict = data.get('users', {})
    selected_users = [user for user in users_dict.values() if user['selected']]
    if not selected_users:
        await callback_query.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return
    await state.update_data(selected_users=selected_users)
    await callback_query.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    await state.set_state("waiting_for_message_text")


@router.message(StateFilter("waiting_for_message_text"))
async def handle_message_text(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    await state.update_data(message_text=message.text)
    data = await state.get_data()
    selected_users = data.get('selected_users', [])

    await message.answer(
        f"–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n{message.text}\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(selected_users)}.",
        reply_markup=await InlineKeyboards.show_notify_change_cancel()
    )
    await state.set_state(None)


@router.callback_query(lambda call: call.data == 'edit_message')
async def edit_message(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    await state.set_state("waiting_for_message_text")


@router.callback_query(lambda call: call.data == 'send_notification')
async def send_notification(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message_text = data.get('message_text')
    selected_users = data.get('selected_users', [])

    if not message_text:
        await callback_query.answer("–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π.",
                                    show_alert=True)
        return

    count = 0
    successful_user_ids = []

    for user in selected_users:
        try:
            await callback_query.bot.send_message(chat_id=user['user_id'], text=message_text)
            successful_user_ids.append(user['user_id'])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            count += 1
        except Exception as e:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ
    await callback_query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", show_alert=True, cache_time=3)
    await callback_query.message.edit_text('–ì–æ—Ç–æ–≤–æ üéâ\n')

    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.pushes.add_push_record(message=message_text, user_ids=successful_user_ids)
        except Exception as e:
            await logger.log_error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", e)


@router.callback_query(UserPaginationCallback.filter())
async def paginate_users(callback_query: types.CallbackQuery, callback_data: UserPaginationCallback, state: FSMContext):
    data = await state.get_data()
    users_dict = data.get('users', {})
    page = callback_data.page
    if callback_data.action == 'next' and (page * 5) < len(users_dict):
        page += 1
        await show_users(callback_query.message, page, users_dict)
        return
    elif callback_data.action == 'previous' and page > 1:
        page -= 1
        await show_users(callback_query.message, page, users_dict)
        return
    await callback_query.answer()
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    data = await state.get_data()
    users_dict = data.get('users', {})
    page = callback_data.page
    if callback_data.action == 'next' and page * 5 < len(users_dict) or callback_data.action == 'previous' and page > 1:
        await show_users(callback_query.message, page, users_dict)
    await callback_query.answer()


async def show_users(message: types.Message, page: int, users_dict: dict):
    users = list(users_dict.values())[5 * (page - 1):5 * page]
    has_next = len(users_dict) > page * 5
    try:
        print(users,page,has_next)
        keyboard = await InlineKeyboards.create_user_pagination_with_users_keyboard(users, page, has_next)
        print('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–¥–µ–ª–∞–Ω–∞')
        user_list = "–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?"
        if not user_list:
            user_list = "No users found."
    except Exception as e:
        await logger.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', e)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await message.edit_text(user_list, reply_markup=keyboard)
    except:
        await message.answer(user_list, reply_markup=keyboard)
