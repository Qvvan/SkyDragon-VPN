from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class SendMessageUser(StatesGroup):
    waiting_user_id = State()
    waiting_message = State()
    preview_message = State()

# –ë—É—Ñ–µ—Ä –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
KEYBOARD_BUFFER = {}

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
PREDEFINED_KEYBOARDS = {
    ":show_referrals": "üê≤ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è",
    ":get_invite_link": "üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
    ":trial_subs": "üê≤ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
    ":main_menu": "üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    ":view_subs": "üêâ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
    ":faq": "üìú –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(Command(commands="sms"))
async def start_sending_message(message: types.Message, state: FSMContext):
    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ user_id, –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")]]
        )
    )
    await state.set_state(SendMessageUser.waiting_user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ user_id
@router.message(SendMessageUser.waiting_user_id)
async def process_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")]]
            )
        )
        await state.set_state(SendMessageUser.waiting_message)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(SendMessageUser.waiting_message)
async def process_message_text(message: types.Message, state: FSMContext):
    text = message.text
    await state.update_data(text=text)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=key)]
        for key, name in PREDEFINED_KEYBOARDS.items()
    ])
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_preview")
    ])

    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query()
async def process_keyboard_selection(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data

    if data in PREDEFINED_KEYBOARDS:
        if data not in KEYBOARD_BUFFER:
            KEYBOARD_BUFFER[data] = PREDEFINED_KEYBOARDS[data]
            await callback_query.answer(f"–ö–Ω–æ–ø–∫–∞ '{PREDEFINED_KEYBOARDS[data]}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            del KEYBOARD_BUFFER[data]
            await callback_query.answer(f"–ö–Ω–æ–ø–∫–∞ '{PREDEFINED_KEYBOARDS[data]}' —É–¥–∞–ª–µ–Ω–∞.")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{PREDEFINED_KEYBOARDS[key]} ‚úÖ" if key in KEYBOARD_BUFFER else PREDEFINED_KEYBOARDS[key],
                callback_data=key
            )] for key in PREDEFINED_KEYBOARDS
        ])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_preview")
        ])

        await callback_query.message.edit_reply_markup(reply_markup=keyboard)

    elif data == "send_preview":
        user_data = await state.get_data()
        text = user_data.get("text")

        preview_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=key[1:])]
            for key, name in KEYBOARD_BUFFER.items()
        ])
        preview_keyboard.inline_keyboard.append([
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")
        ])

        await callback_query.message.edit_text(
            text=f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=preview_keyboard
        )
        await state.set_state(SendMessageUser.preview_message)

    elif data == "confirm_send":
        user_data = await state.get_data()
        user_id = user_data.get("user_id")
        text = user_data.get("text")

        real_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=key)]
            for key, name in KEYBOARD_BUFFER.items()
        ])

        try:
            await callback_query.bot.send_message(chat_id=user_id, text=text, reply_markup=real_keyboard)
            await callback_query.message.edit_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await state.clear()

    elif data == "cancel_send":
        await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
