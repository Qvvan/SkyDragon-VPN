from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from config_data.config import ADMIN_IDS
from database.context_manager import DatabaseContextManager
from filters.admin import IsAdmin
from handlers.services.extend_latest_subscription import extend_user_subscription
from handlers.services.key_create import BaseKeyManager
from keyboards.kb_inline import InlineKeyboards, UserInfoCallbackFactory, UserSelectCallback, ChangeUserSubCallback
from logger.logging_config import logger
from models.models import SubscriptionStatusEnum
from state.state import KeyInfo, UserSubInfo

router = Router()


@router.message(Command(commands='user_info'), IsAdmin(ADMIN_IDS))
async def show_commands(message: types.Message, state: FSMContext):
    await message.answer(
        text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        reply_markup=await InlineKeyboards.cancel()
    )
    await state.set_state(KeyInfo.waiting_key_info)


@router.message(KeyInfo.waiting_key_info)
async def user_info(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = int(message.text)
    async with DatabaseContextManager() as session_methods:
        try:
            user_info = await session_methods.users.get_user(user_id)
            response_user = (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_info.username}\n"
                f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.user_id}\n"
                f"üö´ –°—Ç–∞—Ç—É—Å –ë–∞–Ω–∞: {'üü¢ –ù–µ –∑–∞–±–∞–Ω–µ–Ω' if user_info.ban == 0 else 'üî¥ –ó–∞–±–∞–Ω–µ–Ω'}\n"
                f"üéÅ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {'üü¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞' if user_info.trial_used else 'üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞'}\n"
                f"‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user_info.last_visit.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            await message.answer(
                text=response_user,
                reply_markup=await InlineKeyboards.user_info(
                    user_id=user_id,
                    ban=user_info.ban,
                    trial=user_info.trial_used),
            )
            await state.clear()

        except Exception as e:
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \n{e}")


@router.callback_query(UserInfoCallbackFactory.filter(F.action == "user_ban"))
async def handle_user_ban(callback_query: CallbackQuery, callback_data: UserInfoCallbackFactory):
    user_id = callback_data.user_id
    ban_status = callback_data.ban

    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.users.update_user(user_id=user_id, ban=ban_status)
            await session_methods.session.commit()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            current_text = callback_query.message.text
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—Å—Ç–µ
            updated_text = current_text.replace(
                "üü¢ –ù–µ –∑–∞–±–∞–Ω–µ–Ω" if ban_status else "üî¥ –ó–∞–±–∞–Ω–µ–Ω",
                "üî¥ –ó–∞–±–∞–Ω–µ–Ω" if ban_status else "üü¢ –ù–µ –∑–∞–±–∞–Ω–µ–Ω"
            )

            # –°–æ–∑–¥–∞—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            updated_keyboard = await InlineKeyboards.user_info(
                user_id=user_id,
                ban=ban_status,
                trial=callback_data.trial
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if updated_text != current_text or callback_query.message.reply_markup != updated_keyboard:
                await callback_query.message.edit_text(text=updated_text, reply_markup=updated_keyboard)

            await callback_query.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {'–∑–∞–±–∞–Ω–µ–Ω' if ban_status else '—Ä–∞–∑–±–∞–Ω–µ–Ω'}.")

        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@router.callback_query(UserInfoCallbackFactory.filter(F.action == "user_trial"))
async def handle_user_trial(callback_query: CallbackQuery, callback_data: UserInfoCallbackFactory):
    user_id = callback_data.user_id
    trial_status = callback_data.trial

    async with DatabaseContextManager() as session_methods:
        try:
            await session_methods.users.update_user(user_id=user_id, trial_used=trial_status)
            await session_methods.session.commit()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            current_text = callback_query.message.text

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—Å—Ç–µ
            updated_text = current_text.replace(
                "üü¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞" if not trial_status else "üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞",
                "üî¥ –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞" if not trial_status else "üü¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            updated_keyboard = await InlineKeyboards.user_info(
                user_id=user_id,
                ban=callback_data.ban,
                trial=trial_status
            )

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await callback_query.message.edit_text(text=updated_text, reply_markup=updated_keyboard)

            await callback_query.answer(f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if trial_status else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}.")
            await logger.info(
                f"–ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} {'–≤–∫–ª—é—á–µ–Ω–∞' if trial_status else '–≤—ã–∫–ª—é—á–µ–Ω–∞'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
            await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", e)


@router.callback_query(UserSelectCallback.filter(F.action == "user_subs_info"))
async def handle_user_subscriptions(callback_query: CallbackQuery, callback_data: UserSelectCallback):
    user_id = int(callback_data.user_id)
    async with DatabaseContextManager() as session_methods:
        try:
            subs = await session_methods.subscription.get_subscription(user_id)
            if not subs:
                await callback_query.answer(
                    text='–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫',
                    show_alert=True,
                    cache_time=5
                )
                return
            for sub in subs:
                response_message = (
                    f"üÜî ID –ø–æ–¥–ø–∏—Å–∫–∏: {sub.subscription_id}\n"
                    f"üì∂ –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if sub.status == SubscriptionStatusEnum.ACTIVE else 'üî¥ –ò—Å—Ç–µ–∫–ª–∞'}\n"
                    f"üè∑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: {'‚úÖ –î–∞' if sub.auto_renewal else '‚ùå –ù–µ—Ç'}\n"
                    f"üîë –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥: {sub.config_link}\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏: {sub.start_date.strftime('%Y-%m-%d %H:%M')}\n"
                    f"üìÖ –ö–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∫–∏: {sub.end_date.strftime('%Y-%m-%d %H:%M')}\n\n"
                )
                message_sub_info = await callback_query.message.answer(
                    text=response_message,
                    reply_markup=await InlineKeyboards.sub_info(user_id, sub),
                )
        except Exception as e:
            await logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", e)
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \n{e}")


@router.callback_query(ChangeUserSubCallback.filter(F.action == "change_date_sub"))
async def handle_user_trial(callback_query: CallbackQuery, callback_data: ChangeUserSubCallback, state: FSMContext):
    await state.update_data(user_id=int(callback_data.user_id))
    await callback_query.message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:',
        reply_markup=await InlineKeyboards.cancel()
    )
    await state.set_state(UserSubInfo.waiting_duration_days)


@router.message(UserSubInfo.waiting_duration_days)
async def process_duration_days(message: types.Message, state: FSMContext):
    try:
        duration_days = int(message.text)
        data = await state.get_data()
        user_id = data.get('user_id')

        async with DatabaseContextManager() as session_methods:
            user = await session_methods.users.get_user(user_id)
            await extend_user_subscription(user_id, user.username, duration_days, session_methods)
            await session_methods.session.commit()
            await message.answer("–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")

    except ValueError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')

    await state.clear()


@router.callback_query(ChangeUserSubCallback.filter(F.action == "delete_sub"))
async def handle_user_trial(callback_query: CallbackQuery, callback_data: ChangeUserSubCallback):
    async with DatabaseContextManager() as session_methods:
        try:
            sub = await session_methods.subscription.get_subscription_by_id(callback_data.subscription_id)
            user = await session_methods.users.get_user(callback_data.user_id)
            await BaseKeyManager(server_ip=sub.server_ip).delete_key(sub.key_id)

            result = await session_methods.subscription.delete_sub(subscription_id=sub.subscription_id)
            if not result:
                await logger.log_error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä–∏ –µ–µ –∏—Å—Ç–µ—á–µ–Ω–∏–∏\n'
                                       f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {sub.user_id}\nUsername: @{user.username}\n', Exception)
                return

            await session_methods.session.commit()
        except Exception as e:
            await session_methods.session.rollback()
            await logger.log_error(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {sub.user_id}\nUsername: @{user.username}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏', e)

        await callback_query.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")


@router.callback_query(ChangeUserSubCallback.filter(F.action == "change_expire_sub"))
async def handle_user_trial(callback_query: CallbackQuery, callback_data: ChangeUserSubCallback):
    await callback_query.message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")


@router.callback_query(ChangeUserSubCallback.filter(F.action == "change_status_key"))
async def handle_user_trial(callback_query: CallbackQuery, callback_data: ChangeUserSubCallback):
    async with DatabaseContextManager() as session_methods:
        try:
            sub = await session_methods.subscription.get_subscription_by_id(callback_data.subscription_id)
            key_info = await BaseKeyManager(server_ip=sub.server_ip).get_inbound_by_id(sub.key_id)
            status_key = key_info.get('obj').get('enable')
            await BaseKeyManager(server_ip=sub.server_ip).update_key_enable(sub.key_id, not status_key)
            await callback_query.message.edit_reply_markup()
            await callback_query.answer(
                text=f"–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ: {'–í—ã–∫–ª—é—á–µ–Ω' if status_key else '–í–∫–ª—é—á–µ–Ω'}",
                show_alert=True,
                cache_time=3
            )
        except Exception as e:
            await logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞:", e)
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞")

