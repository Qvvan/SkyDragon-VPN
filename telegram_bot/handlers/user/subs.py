from datetime import datetime

import pytz
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database.context_manager import DatabaseContextManager
from keyboards.kb_inline import InlineKeyboards, SubscriptionCallbackFactory, StatusPay, AutoRenewalCallbackFactory
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger

router = Router()

moscow_tz = pytz.timezone("Europe/Moscow")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥–ø–∏—Å–æ–∫
@router.callback_query(lambda callback: callback.data == "view_subs")
async def get_user_subs_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    previous_message_id = data.get("text_dragons_overview_id")
    show_guide_message_id = data.get("show_guide_message")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    async def delete_message_safe(message_id):
        try:
            await callback.bot.delete_message(callback.message.chat.id, message_id)
        except Exception as e:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}")

    if show_guide_message_id:
        await delete_message_safe(show_guide_message_id)
        await state.update_data(show_guide_message_id=None)

    if previous_message_id:
        await delete_message_safe(previous_message_id)
        await state.update_data(text_dragons_overview_id=None)

    await show_user_subscriptions(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        message=callback.message,
        state=state
    )
    await callback.answer()


@router.message(Command(commands="profile"))
async def get_user_subs_command(message: Message, state: FSMContext):
    await show_user_subscriptions(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message,
        state=state
    )


async def show_user_subscriptions(user_id, username, message, state: FSMContext):
    async with (DatabaseContextManager() as session):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_data = await session.subscription.get_subscription(user_id)

            await state.update_data(back_target='view_subs')
            await state.update_data(callback_for_support='view_subs')
            user = await session.users.get_user(user_id=user_id)
            if subscription_data is None:
                if not user.trial_used:
                    await message.answer(
                        text=LEXICON_RU['trial_offer'],
                        reply_markup=await InlineKeyboards.get_trial_subscription_keyboard()
                    )
                else:
                    try:
                        await message.edit_text(
                            text=LEXICON_RU['subscription_not_found'],
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                        callback_data="subscribe"
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text="üîô –ù–∞–∑–∞–¥",
                                        callback_data="back_to_start"
                                    )
                                ],
                            ])
                        )
                    except:
                        await message.answer(
                            text=LEXICON_RU['subscription_not_found'],
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                        callback_data="subscribe"
                                    )
                                ],
                            ])
                        )
                return

            buttons = []

            if len(subscription_data) == 1:
                detailed_info = await format_subscription_details(subscription_data[0])

                try:
                    await message.edit_text(
                        text=detailed_info,
                        parse_mode="HTML",
                        reply_markup=await InlineKeyboards.menu_subs(
                            subscription_id=subscription_data[0].subscription_id,
                            auto_renewal=subscription_data[0].auto_renewal,
                            back_button="main_menu"
                        )
                    )
                except:
                    await message.answer(
                        text=detailed_info,
                        parse_mode="HTML",
                        reply_markup=await InlineKeyboards.menu_subs(
                            subscription_id=subscription_data[0].subscription_id,
                            auto_renewal=subscription_data[0].auto_renewal,
                            back_button="main_menu"
                        )
                    )
                return

            for index, data in enumerate(subscription_data):
                end_date = data.end_date.date()
                days_left = (end_date - datetime.now().date()).days

                if days_left >= 0:
                    button_text = f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞({days_left} –¥–Ω.)"
                else:
                    button_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üìú {button_text}",
                        callback_data=f"view_details_{data.subscription_id}"
                    )
                ])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(subscription_id=data.subscription_id)

            if not user.trial_used:
                buttons.append([
                    InlineKeyboardButton(
                        text="üê≤ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                        callback_data="trial_subs"
                    )
                ])
            buttons.append([
                InlineKeyboardButton(
                    text="üí∞ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π",
                    callback_data="history_payments"
                )
            ])
            buttons.append([
                InlineKeyboardButton(
                    text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ])

            try:
                await message.edit_text(
                    text='<b>–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                    parse_mode="HTML")
            except:
                await message.answer(
                    text='<b>–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                    parse_mode="HTML")

        except Exception as e:
            await logger.log_error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n'
                                   f'ID: {user_id}\n'
                                   f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫', e)


@router.callback_query(lambda c: c.data.startswith("view_details_"))
async def show_subscription_details(callback: CallbackQuery, state: FSMContext):
    subscription_id = int(callback.data.split("_")[2])

    await callback.answer()
    async with DatabaseContextManager() as session:
        try:
            subscription = await session.subscription.get_subscription_by_id(subscription_id)
            if subscription:
                detailed_info = await format_subscription_details(subscription)

                await state.update_data(back_target=f"view_details_{subscription_id}")
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
                await callback.message.edit_text(
                    text=detailed_info,
                    parse_mode="HTML",
                    reply_markup=await InlineKeyboards.menu_subs(subscription_id, subscription.auto_renewal)
                )
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
                                   f"ID: {callback.from_user.id}\n", e)


async def format_subscription_details(subscription):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ."""
    created_at_msk = subscription.created_at.replace(tzinfo=pytz.utc).astimezone(moscow_tz)
    end_date_msk = subscription.end_date.replace(tzinfo=pytz.utc).astimezone(moscow_tz)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    now_msk = datetime.utcnow().replace(tzinfo=pytz.utc).astimezone(moscow_tz)
    remaining_days = (end_date_msk.date() - now_msk.date()).days

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –ø—Ä–æ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription.status == '–∞–∫—Ç–∏–≤–Ω–∞—è':
        subscription_status = (
            "<b>üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç</b>\n"
            f"‚îú <code>{end_date_msk.strftime('%d %B %Y, %H:%M:%S')} MSK</code>\n"
            f"‚îî <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> <code>{remaining_days} {'–¥–µ–Ω—å' if remaining_days == 1 else '–¥–Ω—è' if 1 < remaining_days < 5 else '–¥–Ω–µ–π'}</code>\n\n"
        )
    else:
        subscription_status = (
            "<b>üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>\n"
            f"‚îî <code>{end_date_msk.strftime('%d %B %Y, %H:%M:%S')} MSK</code>\n\n"
        )

    return (
        "<b>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n"
        f"‚îú <b>–°–æ–∑–¥–∞–Ω–∞:</b> <code>{created_at_msk.strftime('%d %B %Y, %H:%M:%S')} MSK</code>\n"
        f"‚îî <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ <code>–ê–∫—Ç–∏–≤–Ω–∞</code>' if subscription.status == '–∞–∫—Ç–∏–≤–Ω–∞—è' else '‚ùå <code>–ù–µ–∞–∫—Ç–∏–≤–Ω–∞, –∏—Å—Ç–µ–∫–ª–∞</code>'}\n\n"
        f"{subscription_status}"
        "<b>üè∑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ</b>\n"
        f"‚îî {'‚úÖ <code>–í–∫–ª—é—á–µ–Ω–æ</code>' if subscription.auto_renewal else '‚ùå <code>–í—ã–∫–ª—é—á–µ–Ω–æ</code>'}\n\n"
        "<b>üîó –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n"
        f"<code>{subscription.config_link if subscription.config_link else '‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}</code>"
    )


@router.callback_query(SubscriptionCallbackFactory.filter(F.action == 'extend_subscription'))
async def extend_subscription(callback: CallbackQuery, callback_data: SubscriptionCallbackFactory, state: FSMContext):
    subscription_id = callback_data.subscription_id
    back = callback_data.back
    status_pay = callback_data.status_pay

    async with DatabaseContextManager() as session:
        sub = await session.subscription.get_subscription_by_id(subscription_id)
        if not sub and status_pay == StatusPay.OLD:
            await callback.answer(
                text="–ü–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å, –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞üôè",
                show_alert=True,
                cache_time=5
            )
            return
    await callback.answer()

    data = await state.get_data()
    previous_message_id = data.get("text_dragons_overview_id")
    if previous_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, previous_message_id)
            await state.update_data(text_dragons_overview_id=None)
        except Exception as e:
            await logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {previous_message_id}: {e}")

    await state.update_data(subscription_id=subscription_id)
    await state.update_data(status_pay=StatusPay.OLD)

    await callback.message.edit_text(
        text=LEXICON_RU['createorder'],
        reply_markup=await InlineKeyboards.create_order_keyboards(StatusPay.OLD, back, subscription_id),
    )


@router.callback_query(AutoRenewalCallbackFactory.filter(F.action == 'auto_renewal'))
async def toggle_auto_renewal(callback: CallbackQuery, callback_data: AutoRenewalCallbackFactory):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    is_auto_renewal_enabled = callback_data.auto_renewal_enabled
    subscription_id = callback_data.subscription_id

    text = (
        f"üîî –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if is_auto_renewal_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not is_auto_renewal_enabled else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å",
                callback_data=AutoRenewalCallbackFactory(
                    action="off_or_on",
                    subscription_id=subscription_id,
                    auto_renewal_enabled=not is_auto_renewal_enabled).pack()
            ),
            InlineKeyboardButton(
                text='üîô –ù–∞–∑–∞–¥',
                callback_data=f'view_details_{subscription_id}'
            )
        ]
    ])

    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(AutoRenewalCallbackFactory.filter(F.action == 'off_or_on'))
async def toggle_auto_renewal(callback: CallbackQuery, callback_data: AutoRenewalCallbackFactory):
    is_auto_renewal_enabled = callback_data.auto_renewal_enabled
    subscription_id = callback_data.subscription_id

    async with DatabaseContextManager() as session_methods:
        if is_auto_renewal_enabled:
            await session_methods.subscription.update_sub(subscription_id, auto_renewal=is_auto_renewal_enabled)
        else:
            await session_methods.subscription.update_sub(subscription_id, auto_renewal=is_auto_renewal_enabled,
                                                          card_details_id=None)
        await session_methods.session.commit()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å" if not is_auto_renewal_enabled else "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å",
                callback_data=AutoRenewalCallbackFactory(
                    action="off_or_on",
                    subscription_id=subscription_id,
                    auto_renewal_enabled=not is_auto_renewal_enabled).pack()
            ),
            InlineKeyboardButton(
                text='üîô –ù–∞–∑–∞–¥',
                callback_data=f'view_details_{subscription_id}'
            )
        ]
    ])

    await callback.message.edit_text(
        text=f"üîî –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if is_auto_renewal_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
             "–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
