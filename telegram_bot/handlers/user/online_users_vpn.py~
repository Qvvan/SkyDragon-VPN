import aiohttp
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config_data.config import PORT_X_UI
from database.context_manager import DatabaseContextManager
from handlers.services.get_session_cookies import get_session_cookie
from logger.logging_config import logger

router = Router()


@router.message(Command(commands='online'))
async def get_online_users(message: Message):
    async with DatabaseContextManager() as session_methods:
        try:
            servers = await session_methods.servers.get_all_servers()
            answer = "–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"

            async with aiohttp.ClientSession() as session:
                for server in servers:
                    try:
                        url = f"https://{server.server_ip}:{PORT_X_UI}/0PkmGmepRhDqrFJ/panel/inbound/onlines"
                        cookies = await get_session_cookie(server.server_ip)

                        if not cookies:
                            answer += f"\n{server.name}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                            continue

                        async with session.post(url=url, cookies=cookies, timeout=10, ssl=False) as response:
                            if response.status == 200:
                                data = await response.json()
                                users = data.get('obj', {})
                                answer += f"\n{server.name}: {len(users) if users else 0} —á–µ–ª–æ–≤–µ–∫"
                            else:
                                answer += f"\n{server.name}: –û—à–∏–±–∫–∞ {response.status}"
                    except aiohttp.ClientError as e:
                        answer += f"\n{server.name}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
                        await logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º {server.name}", e)
                    except Exception as e:
                        answer += f"\n{server.name}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        await logger.log_error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server.name}", e)

            await message.answer(
                text=answer,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data='main_menu'
                            )
                        ]
                    ]
                )
            )
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e)
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –æ–Ω–ª–∞–π–Ω")


@router.callback_query(lambda c: c.data == 'online')
async def callback_get_support(callback: CallbackQuery):
    await callback.answer()
    async with DatabaseContextManager() as session_methods:
        try:
            servers = await session_methods.servers.get_all_servers()
            answer = "–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"

            async with aiohttp.ClientSession() as session:
                for server in servers:
                    try:
                        url = f"https://{server.server_ip}:{PORT_X_UI}/0PkmGmepRhDqrFJ/panel/inbound/onlines"
                        cookies = await get_session_cookie(server.server_ip)

                        if not cookies:
                            answer += f"\n{server.name}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
                            continue

                        async with session.post(url=url, cookies=cookies, timeout=10, ssl=False) as response:
                            if response.status == 200:
                                data = await response.json()
                                users = data.get('obj', {})
                                answer += f"\n{server.name}: {len(users) if users else 0} —á–µ–ª–æ–≤–µ–∫"
                            else:
                                answer += f"\n{server.name}: –û—à–∏–±–∫–∞ {response.status}"
                    except aiohttp.ClientError as e:
                        answer += f"\n{server.name}: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
                        await logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º {server.name}", e)
                    except Exception as e:
                        answer += f"\n{server.name}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        await logger.log_error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ {server.name}", e)

            await callback.message.answer(
                text=answer,
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                callback_data='main_menu'
                            )
                        ]
                    ]
                )
            )
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e)
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –æ–Ω–ª–∞–π–Ω")
