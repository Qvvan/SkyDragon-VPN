from aiogram import Router, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, \
    KeyboardButtonRequestUsers, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.context_manager import DatabaseContextManager
from handlers.services.card_service import create_payment
from logger.logging_config import logger
from models.models import Payments
from utils.gift_checker import activate_gift_handler

router = Router()

activation_locks = {}


class GiftCallback(CallbackData, prefix="gift"):
    action: str
    service_id: str
    sender_user_id: int
    recipient_user_id: int


@router.message(Command(commands="gift_sub"))
async def process_start_command(message: Message, state: FSMContext):
    select_user_button = KeyboardButton(
        text="üéÅ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞",
        request_users=KeyboardButtonRequestUsers(
            request_id=1,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
            user_is_bot=False,  # –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ –±–æ—Ç—ã
            max_quantity=1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            request_name=True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request_username=True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º username
            request_photo=False  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        )
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[select_user_button]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await message.answer(
        "üéÅ–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞ ‚ú®\n\n"
        "üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞, –∞ –Ω–æ–≤–∞—è ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üïí",
        reply_markup=keyboard
    )


@router.message(F.users_shared)
async def handle_users_shared(message: Message):
    users_shared = message.users_shared

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
    if users_shared.request_id == 1:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        selected_user = users_shared.users[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ (—É –Ω–∞—Å max_quantity=1)

        recipient_user_id = selected_user.user_id
        sender_user_id = message.from_user.id
        first_name = selected_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        username = selected_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ò –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
        await message.answer(
            f"üéÅ",
            reply_markup=ReplyKeyboardRemove()  # –£–î–ê–õ–Ø–ï–ú –ö–õ–ê–í–ò–ê–¢–£–†–£
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message.answer(
            "‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–∞—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω!\n\n"
            f"üë§ –ò–º—è: {first_name}\n"
            f"üîó Username: @{username if username != '–ù–µ —É–∫–∞–∑–∞–Ω' else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=await create_order_keyboards(sender_user_id=sender_user_id,
                                                      recipient_user_id=recipient_user_id)
        )


@router.callback_query(lambda c: c.data == 'gift_sub')
async def handle_know_more(callback: CallbackQuery):
    select_user_button = KeyboardButton(
        text="üéÅ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞",
        request_users=KeyboardButtonRequestUsers(
            request_id=1,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
            user_is_bot=False,  # –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ –±–æ—Ç—ã
            max_quantity=1,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            request_name=True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request_username=True,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º username
            request_photo=False  # –ù–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
        )
    )

    keyboard = ReplyKeyboardMarkup(
        keyboard=[[select_user_button]],
        resize_keyboard=True,
        one_time_keyboard=False
    )

    await callback.message.answer(
        "üéÅ–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞ ‚ú®\n\n"
        "üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞, –∞ –Ω–æ–≤–∞—è ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üïí\n\n"
        "–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º! üòä",
        reply_markup=keyboard
    )


async def create_order_keyboards(sender_user_id: int, recipient_user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏."""
    async with DatabaseContextManager() as session_methods:
        try:
            keyboard = InlineKeyboardBuilder()
            services = await session_methods.services.get_services()
            buttons: list[InlineKeyboardButton] = []

            for service in services:
                service_id = str(service.service_id)
                service_name = service.name

                callback_data = GiftCallback(
                    action="gift",
                    service_id=service_id,
                    sender_user_id=sender_user_id,
                    recipient_user_id=recipient_user_id
                ).pack()

                buttons.append(InlineKeyboardButton(text=service_name, callback_data=callback_data))
            keyboard.row(*buttons)

            return keyboard.as_markup()
        except Exception as e:
            await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)


@router.callback_query(GiftCallback.filter(F.action == 'gift'))
async def handle_gift_payment(callback_query: CallbackQuery, callback_data: GiftCallback):
    service_id = int(callback_data.service_id)
    sender_user_id = callback_data.sender_user_id
    recipient_user_id = callback_data.recipient_user_id

    async with DatabaseContextManager() as session_methods:
        try:
            await callback_query.answer()
            service = await session_methods.services.get_service_by_id(service_id)
            payment_data = create_payment(
                amount=service.price,
                description=f"–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {service.name}",
                return_url="https://t.me/SkyDragonVPNBot",
                service_id=service_id,
                service_type="gift",
                user_id=sender_user_id,
                recipient_user_id=recipient_user_id,
                username=callback_query.from_user.username,
            )

            payment_url = payment_data['confirmation']['confirmation_url']
            payment_id = payment_data['id']

            payment_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
                            url=payment_url
                        )
                    ],
                ])

            await callback_query.message.edit_text(
                text=(
                    f"üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {service.name}</b>\n\n"
                    f"‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {service.duration_days} –¥–Ω–µ–π\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> {service.price} ‚ÇΩ\n\n"
                ),
                parse_mode="HTML",
                reply_markup=payment_kb,
            )

            await session_methods.payments.create_payments(
                Payments(
                    payment_id=payment_id,
                    user_id=callback_query.from_user.id,
                    recipient_user_id=recipient_user_id,
                    service_id=service_id,
                    payment_type='gift',
                )
            )
            await session_methods.session.commit()
        except Exception as e:
            await logger.log_error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.from_user.username}'
                                   f'ID: {callback_query.from_user.id}\n'
                                   f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞', e)
            await callback_query.message.edit_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")


@router.callback_query(F.data.startswith("activate_gift_"))
async def handle_gift_activation(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ callback_data
        gift_id = int(callback_query.data.split("_")[-1])
        user_id = callback_query.from_user.id

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_key = f"gift_{gift_id}_{user_id}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫
        if lock_key in activation_locks:
            await callback_query.answer("‚è≥ –ü–æ–¥–∞—Ä–æ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", show_alert=True)
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        activation_locks[lock_key] = True

        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ callback_query
            bot = callback_query.bot

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–∞—Ä–∫–∞
            await activate_gift_handler(bot, callback_query, gift_id)

        finally:
            # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            activation_locks.pop(lock_key, None)

    except (ValueError, IndexError) as e:
        await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        lock_key = f"gift_{callback_query.data.split('_')[-1]}_{callback_query.from_user.id}"
        activation_locks.pop(lock_key, None)
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
