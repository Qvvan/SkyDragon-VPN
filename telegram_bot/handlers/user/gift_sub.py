from aiogram import Router, F
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database.context_manager import DatabaseContextManager
from handlers.services.card_service import create_payment
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger
from models.models import Payments
from state.state import Gift

router = Router()


class GiftCallback(CallbackData, prefix="gift"):
    action: str
    service_id: str
    receiver_username: str


@router.message(Command(commands="gift_sub"))
async def process_start_command(message: Message, state: FSMContext):
    await message.answer(
        text=(
            "üéÅ *–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É* ‚ú®\n\n"
            "üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞, –∞ –Ω–æ–≤–∞—è ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üïí\n\n"
            "–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º! üòä"
        ),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    callback_data="cancel"
                )
            ],
        ])
    )
    await state.set_state(Gift.waiting_username)


@router.callback_query(lambda c: c.data == 'gift_sub')
async def handle_know_more(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        text=(
            "üéÅ–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ú®\n\n"
            "üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–Ω–∞, –∞ –Ω–æ–≤–∞—è ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üïí\n\n"
            "–°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º! üòä"
        ),
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–º–µ–Ω–∞",
                    callback_data="cancel"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="main_menu"
                )
            ],
        ])
    )

    await state.set_state(Gift.waiting_username)


@router.message(Gift.waiting_username)
async def handle_know_more(message: Message, state: FSMContext):
    username = message.text
    if not username.startswith('@') or len(username) == 1:
        await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω—ã–∏ÃÜ —Ñ–æ—Ä–º–∞—Ç @username",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞",
                        callback_data="cancel"
                    )
                ],
            ])
        )
        return
    if username[1:] == message.from_user.username:
        await message.answer(
            text="–ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ",
            parse_mode="Markdown"
        )
        return
    username = username[1:]
    await state.update_data(receiver_username=username)
    await message.answer(
        text=LEXICON_RU['gift'],
        reply_markup=await create_order_keyboards(username, "main_menu"),
    )
    await state.clear()


async def create_order_keyboards(receiver_username: str, back_target: str = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å —É—Å–ª—É–≥–∞–º–∏."""
    async with DatabaseContextManager() as session_methods:
        try:
            keyboard = InlineKeyboardBuilder()
            services = await session_methods.services.get_services()
            buttons: list[InlineKeyboardButton] = []

            for service in services:
                service_id = str(service.service_id)
                service_name = service.name

                callback_data = GiftCallback(
                    action="gift",
                    service_id=service_id,
                    receiver_username=receiver_username
                ).pack()

                buttons.append(InlineKeyboardButton(text=service_name, callback_data=callback_data))
            keyboard.row(*buttons)

            if back_target:
                keyboard.row(
                    InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=back_target)
                )
            else:
                keyboard.row(
                    InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
                )

            return keyboard.as_markup()
        except Exception as e:
            await logger.log_error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥', e)


@router.callback_query(GiftCallback.filter(F.action == 'gift'))
async def handle_know_more(callback_query: CallbackQuery, callback_data: GiftCallback):
    service_list = [
        "–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –º–æ—â—å –¥—É—Ö–∞ –¥—Ä–∞–∫–æ–Ω–∞, –¥–∞—Ä—É—é—â–∞—è –∑–∞—â–∏—Ç—É –Ω–∞ –≤—Ä–µ–º—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∫—Ä—É–≥–∞ –ª—É–Ω—ã.",
        "–©–∏—Ç –¥—Ä–µ–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ –±–µ—Ä–µ–∂—ë—Ç –≤–∞—Å –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä—ë—Ö —Å–º–µ–Ω –≤—Ä–µ–º—ë–Ω –≥–æ–¥–∞, —Å–ª–æ–≤–Ω–æ —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –¥—Ä–µ–≤–Ω–∏—Ö —Ç–∞–π–Ω.",
        "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–º—É–ª–µ—Ç —Å–∏–ª—ã, –Ω–∞–¥—ë–∂–Ω—ã–π –Ω–∞ –¥–æ–ª–≥–∏–µ –º–µ—Å—è—Ü—ã, –∫–æ–≥–¥–∞ —Å–æ–ª–Ω—Ü–µ –∏ —Ç—å–º–∞ —Å–º–µ–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.",
        "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫, —Å–∏–º–≤–æ–ª –≤–µ—á–Ω–æ–π –º–æ—â–∏, —á—Ç–æ –æ–±–µ—Ä–µ–≥–∞–µ—Ç –≤–∞—Å –≤–µ—Å—å –∫—Ä—É–≥–æ–≤–æ—Ä–æ—Ç –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç –∑–∏–º—ã –¥–æ –ª–µ—Ç–∞."
    ]
    receiver_username = callback_data.receiver_username
    service_id = int(callback_data.service_id)
    async with DatabaseContextManager() as session_methods:
        try:
            service = await session_methods.services.get_service_by_id(service_id)
            payment_data = create_payment(
                amount=service.price,
                description=f"–û–ø–ª–∞—Ç–∞ –∑–∞ —É—Å–ª—É–≥—É: {service.name}",
                return_url="https://t.me/SkyDragonVPNBot",
                service_id=service_id,
                service_type="gift",
                receiver_username=receiver_username,
                user_id=callback_query.from_user.id,
                username=callback_query.from_user.username,
            )

            payment_url = payment_data['confirmation']['confirmation_url']
            payment_id = payment_data['id']

            payment_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û–ø–ª–∞—Ç–∏—Ç—å",
                            url=payment_url
                        )
                    ],
                ])

            await callback_query.message.edit_text(
                text=(
                    f"<b>–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è @{receiver_username}!</b> üéÅ\n\n"
                    f"<b>–í—ã –¥–∞—Ä–∏—Ç–µ –∑–∞—â–∏—Ç—É {service.name}–∞ –Ω–∞ {service.duration_days} –¥–Ω–µ–π</b> üïí\n\n"
                    f"üìã <b>–£—Å–ª—É–≥–∞:</b> {service_list[service_id - 1]}\n"
                    f"üí∞ <b>–¶–µ–Ω–∞:</b> {service.price} ‚ÇΩ\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã @{receiver_username} —Å–º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!"
                ),
                parse_mode="HTML",
                reply_markup=payment_kb,
            )
            await session_methods.payments.create_payments(
                Payments(
                    payment_id=payment_id,
                    user_id=callback_query.from_user.id,
                    service_id=service_id
                )
            )
            await session_methods.session.commit()
        except Exception as e:
            await logger.log_error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback_query.from_user.username}'
                                   f'ID: {callback_query.from_user.id}\n'
                                   f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞', e)
            await callback_query.message.edit_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.")
