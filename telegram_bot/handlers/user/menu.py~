from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from keyboards.kb_inline import InlineKeyboards
from lexicon.lexicon_ru import LEXICON_RU

router = Router()


@router.message(Command(commands="main_menu"))
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(back_target='main_menu')
    await message.answer(
        text=LEXICON_RU['main_menu'],
        reply_markup=await InlineKeyboards.main_menu(message.from_user.id),
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data == 'main_menu')
async def handle_know_more(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(back_target='main_menu')
    await callback.message.edit_text(
        text=LEXICON_RU['main_menu'],
        reply_markup=await InlineKeyboards.main_menu(callback.from_user.id),
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data == 'my_gifts')
async def handle_my_gifts(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –ø–æ–¥–∞—Ä–∫–∏'"""
    await callback.answer()

    from database.context_manager import DatabaseContextManager

    async with DatabaseContextManager() as session_methods:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session_methods.users.get_user(callback.from_user.id)
            if not user:
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]])
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            gifts = await session_methods.gifts.get_gifts(callback.from_user.id)
            user_gifts = [gift for gift in gifts if gift.status == "awaiting_activation"]

            if not user_gifts:
                await callback.message.edit_text(
                    "üéÅ –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]])
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏
            message_text = f"üéÅ **–í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏ ({len(user_gifts)}):**\n\n"

            keyboard = []
            for i, gift in enumerate(user_gifts, 1):
                try:
                    service = await session_methods.services.get_service_by_id(gift.service_id)
                    giver = await session_methods.users.get_user(gift.giver_id)

                    service_name = service.name if service else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞"
                    service_days = service.duration_days if service else "?"
                    giver_name = f"@{giver.username}" if giver and giver.username else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                    message_text += f"{i}. **{service_name}** –Ω–∞ {service_days} –¥–Ω–µ–π\n"
                    message_text += f"   –û—Ç: {giver_name}\n\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {i}",
                            callback_data=f"activate_gift_{gift.gift_id}"
                        )
                    ])
                except Exception:
                    continue

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ])

            await callback.message.edit_text(
                message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                parse_mode="Markdown"
            )

        except Exception as e:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            )
