from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database.context_manager import DatabaseContextManager
from keyboards.kb_inline import InlineKeyboards
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger
from models.models import ReferralStatus

router = Router()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤" –∏ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"


@router.message(Command(commands='call_allies'))
async def get_invite_link(message: Message):
    await message.answer(text=LEXICON_RU['invite_info'], reply_markup=await InlineKeyboards.get_invite_keyboard())


@router.callback_query(lambda c: c.data == "back_to_call_allies")
async def show_referrals(callback: CallbackQuery):
    await callback.message.edit_text(text=LEXICON_RU['invite_info'], reply_markup=await InlineKeyboards.get_invite_keyboard())


@router.callback_query(lambda c: c.data == "show_referrals")
async def show_referrals(callback: CallbackQuery):
    user_id = callback.from_user.id

    async with DatabaseContextManager() as session_methods:
        try:
            list_referrals = await session_methods.referrals.get_list_referrers(user_id)
            if not list_referrals:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîó –ü—Ä–∏–∑–≤–∞—Ç—å —Å–æ—é–∑–Ω–∏–∫–∞", callback_data="get_invite_link")
                    ]
                ])
                await callback.message.answer(
                    text=LEXICON_RU['no_invites'],
                    reply_markup=keyboard
                )
                await callback.answer()
                return

            referral_details = []
            for referral in list_referrals:
                invited_username = referral.invited_username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                days = 30 if referral.bonus_issued == ReferralStatus.SUBSCRIBED else 7
                referral_details.append(f"üë§ @{invited_username} - –ë–æ–Ω—É—Å: {days} –¥–Ω–µ–π")

            referral_text = "\n".join(referral_details)
            await callback.message.edit_text(
                text=f"üê≤ –í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã:\n\n{referral_text}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data="back_to_call_allies"
                        )
                    ]
                ])
            )
            await callback.answer()
        except Exception as e:
            await logger.log_error("Error fetching referrals", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"
@router.callback_query(lambda c: c.data == "get_invite_link")
async def send_invite_link(callback: CallbackQuery):
    user_id = callback.from_user.id
    referral_link = f"https://t.me/test_reminders_task_bot?start={user_id}"
    invite_text = LEXICON_RU['invite'].format(referral_link=referral_link)

    await callback.message.edit_text(
        text=invite_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data="back_to_call_allies"
                )
            ]
        ])
    )
    await callback.answer()
