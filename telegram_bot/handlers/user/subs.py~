from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database.context_manager import DatabaseContextManager
from keyboards.kb_inline import InlineKeyboards, SubscriptionCallbackFactory, StatusPay
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥–ø–∏—Å–æ–∫
@router.callback_query(lambda callback: callback.data == "view_subs")
async def get_user_subs_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    previous_message_id = data.get("text_dragons_overview_id")
    show_slow_internet_id = data.get("show_slow_internet")
    show_guide_message_id = data.get("show_guide_message")
    if show_slow_internet_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, show_slow_internet_id)
            await state.update_data(show_slow_internet_id=None)
        except Exception as e:
            await logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {show_slow_internet_id}", e)

    if show_guide_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, show_guide_message_id)
            await state.update_data(show_slow_internet_id=None)
        except Exception as e:
            await logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {show_guide_message_id}", e)

    if previous_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, previous_message_id)
            await state.update_data(text_dragons_overview_id=None)
        except Exception as e:
            await logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {previous_message_id}", e)

    await show_user_subscriptions(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        message=callback.message,
        state=state
    )
    await callback.answer()


@router.message(Command(commands="profile"))
async def get_user_subs_command(message: Message, state: FSMContext):
    await show_user_subscriptions(
        user_id=message.from_user.id,
        username=message.from_user.username,
        message=message,
        state=state
    )


async def show_user_subscriptions(user_id, username, message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    async with (DatabaseContextManager() as session):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            subscription_data = await session.subscription.get_subscription(user_id)

            await state.update_data(back_target='view_subs')
            await state.update_data(callback_for_support='view_subs')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç
            if subscription_data is None:
                user = await session.users.get_user(user_id=user_id)
                if not user.trial_used:
                    await message.answer(
                        text=LEXICON_RU['trial_offer'],
                        reply_markup=await InlineKeyboards.get_trial_subscription_keyboard()
                    )
                else:
                    try:
                        await message.edit_text(
                            text=LEXICON_RU['subscription_not_found'],
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                        callback_data="subscribe"
                                    )
                                ],
                                [
                                    InlineKeyboardButton(
                                        text="üîô –ù–∞–∑–∞–¥",
                                        callback_data="back_to_start"
                                    )
                                ],
                            ])
                        )
                    except:
                        await message.answer(
                            text=LEXICON_RU['subscription_not_found'],
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(
                                        text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                        callback_data="subscribe"
                                    )
                                ],
                            ])
                        )
                return

            buttons = []
            for index, data in enumerate(subscription_data):
                end_date = data.end_date.date()
                days_left = (end_date - datetime.now().date()).days

                if days_left >= 0:
                    button_text = f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞({days_left} –¥–Ω.)"
                else:
                    button_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å"
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üìú {button_text}",
                        callback_data=f"view_details_{data.subscription_id}"
                    )
                ])

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(subscription_id=data.subscription_id)
            buttons.append([
                InlineKeyboardButton(
                    text="üåå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ])

            try:
                await message.edit_text(
                    text='<b>–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                    parse_mode="HTML")
            except:
                await message.answer(
                    text='<b>–ù–∞–∂–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–µ–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ</b>',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
                    parse_mode="HTML")

        except Exception as e:
            await logger.log_error(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫', e)


@router.callback_query(lambda c: c.data.startswith("view_details_"))
async def show_subscription_details(callback: CallbackQuery, state: FSMContext):
    subscription_id = int(callback.data.split("_")[2])

    await callback.answer()
    async with DatabaseContextManager() as session:
        try:
            subscription = await session.subscription.get_subscription_by_id(subscription_id)
            if subscription:
                end_date = subscription.end_date
                key = subscription.key
                status = subscription.status
                name_app = subscription.name_app
                server_name = subscription.server_name
                server_ip = subscription.server_ip

                detailed_info = (
                    f"<b>üêâ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {'üê≤ –î—Ä–∞–∫–æ–Ω –Ω–∞ —Å—Ç—Ä–∞–∂–µ' if status == '–∞–∫—Ç–∏–≤–Ω–∞—è' else 'üíÄ –ü–æ–∫—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}\n"
                    f"<b>üåç –õ–æ–∫–∞—Ü–∏—è VPN:</b> {server_name}\n"
                    f"<b>üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {end_date.strftime('%d-%m-%Y')}\n"
                    f"<b>üê≤üîë –ö–ª—é—á:</b>\n"
                    f"<pre>{key}</pre>"
                )

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
                await callback.message.edit_text(
                    text=detailed_info,
                    parse_mode="HTML",
                    reply_markup=await InlineKeyboards.menu_subs(subscription_id, name_app, server_ip)
                )
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å–∫–∏", e)


@router.callback_query(SubscriptionCallbackFactory.filter(F.action == 'extend_subscription'))
async def extend_subscription(callback: CallbackQuery, callback_data: SubscriptionCallbackFactory, state: FSMContext):
    subscription_id = callback_data.subscription_id
    await callback.answer()

    data = await state.get_data()
    previous_message_id = data.get("text_dragons_overview_id")
    if previous_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, previous_message_id)
            await state.update_data(text_dragons_overview_id=None)
        except Exception as e:
            await logger.log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {previous_message_id}: {e}")

    await state.update_data(subscription_id=subscription_id)
    await state.update_data(status_pay=StatusPay.OLD)

    await callback.message.edit_text(
        text=LEXICON_RU['createorder'],
        reply_markup=await InlineKeyboards.create_order_keyboards(StatusPay.OLD, f'view_details_{subscription_id}'),
    )
