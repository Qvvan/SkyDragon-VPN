from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from database.context_manager import DatabaseContextManager
from handlers.services.extend_latest_subscription import extend_user_subscription
from keyboards.kb_inline import InlineKeyboards
from lexicon.lexicon_ru import LEXICON_RU
from logger.logging_config import logger
from models.models import ReferralStatus, Referrals, Users

router = Router()


@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(
            text=LEXICON_RU['start'],
            reply_markup=await InlineKeyboards.get_menu_keyboard(),
            parse_mode="Markdown"
            )
    command_args = message.text.split()
    referrer_id = int(command_args[1]) if len(command_args) > 1 and command_args[1].isdigit() else None

    keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üë• –°–∫–æ–ª—å–∫–æ —Å–æ—é–∑–Ω–∏–∫–æ–≤", callback_data="show_referrals")
                    ]
                ]
            )

    async with DatabaseContextManager() as session_methods:
        try:
            status_user = await session_methods.users.add_user(
                    Users(
                            user_id=message.from_user.id,
                            username=message.from_user.username,
                            )
                    )
            if status_user:
                await logger.log_info(
                        f"–ö –Ω–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:\n"
                        f"–ò–º—è: @{message.from_user.username}\n"
                        f"id: {message.from_user.id}"
                        )
                if referrer_id and referrer_id != message.from_user.id:
                    await message.bot.send_message(
                            referrer_id,
                            f"üê≤ –í–∞—à —Å–æ—é–∑–Ω–∏–∫ @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫—Ä—É–≥—É! –î—Ä–µ–≤–Ω–∏–µ –¥—Ä–∞–∫–æ–Ω—ã –¥–∞—Ä—É—é—Ç –≤–∞–º –±–æ–Ω—É—Å —Å–∏–ª—ã üéÅ",
                            reply_markup=keyboard
                            )
                    await logger.log_info(
                            f"–ï–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {referrer_id}"
                            )
                    try:
                        await session_methods.referrals.add_referrer(
                                referral=Referrals(
                                        referrer_id=referrer_id,
                                        referred_id=message.from_user.id,
                                        invited_username=message.from_user.username,
                                        bonus_issued=ReferralStatus.INVITED,
                                        )
                                )
                        await extend_user_subscription(referrer_id, 7, session_methods)
                    except Exception as e:
                        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞ –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ: {referrer_id}", e)
            await session_methods.session.commit()
        except Exception as e:
            await logger.log_error(
                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
                    f'–ü—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', e
                    )


@router.callback_query(lambda c: c.data == 'back_to_start')
async def handle_know_more(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'."""
    await callback.answer()
    await callback.message.edit_text(
            text=LEXICON_RU['start'],
            reply_markup=await InlineKeyboards.get_menu_keyboard(),
            parse_mode="Markdown"
            )


@router.callback_query(lambda c: c.data == 'referal_subs')
async def handle_know_more(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'."""
    await callback.answer()
    await callback.message.edit_text(
            text=LEXICON_RU['invite_info'],
            reply_markup=await InlineKeyboards.get_invite_keyboard('back_to_start')
            )


@router.callback_query(lambda c: c.data == 'dragon_legends')
async def handle_know_more(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–õ–µ–≥–µ–Ω–¥–∞ –æ –¥—Ä–∞–∫–æ–Ω–∞—Ö'."""
    await callback.answer()

    await state.update_data(back_target='dragon_legends')

    await callback.message.edit_text(
            text=LEXICON_RU['legend'],
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                    text="üî• –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—â–∏—Ç—É –¥—Ä–∞–∫–æ–Ω–∞",
                                    callback_data="subscribe"
                                    )
                            ],
                        [
                            InlineKeyboardButton(
                                    text="üîô –ù–∞–∑–∞–¥",
                                    callback_data="back_to_start"
                                    )
                            ]
                        ]
                    )
            )


@router.callback_query(lambda c: c.data == 'trial_subs')
async def handle_know_more(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'."""
    await callback.answer()
    async with DatabaseContextManager() as session:
        try:
            user_id = callback.from_user.id
            user = await session.users.get_user(user_ib=user_id)
            if not user.trial_used:
                await callback.message.edit_text(
                        text=LEXICON_RU['trial_offer'],
                        reply_markup=await InlineKeyboards.get_trial_subscription_keyboard()
                        )
            else:
                await callback.message.edit_text(
                        text=LEXICON_RU['trial_subscription_used'],
                        reply_markup=InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [
                                        InlineKeyboardButton(
                                                text="üêâ –ú–æ–∏ –¥—Ä–∞–∫–æ–Ω—ã",
                                                callback_data="view_subs"
                                                )
                                        ],
                                    [
                                        InlineKeyboardButton(
                                            text="üßô‚Äç‚ôÇÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                                            callback_data="help_wizards_callback"
                                        )
                                    ],
                                    [
                                        InlineKeyboardButton(
                                                text="üîô –ù–∞–∑–∞–¥",
                                                callback_data="back_to_start"
                                                )
                                        ]
                                    ]
                                )
                        )
        except Exception as e:
            await logger.log_error(f"Error fetching user @{callback.from_user.username}", e)


