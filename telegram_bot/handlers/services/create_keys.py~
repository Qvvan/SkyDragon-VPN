import base64
import hashlib

from database.context_manager import DatabaseContextManager
from handlers.services.key_create import BaseKeyManager
from logger.logging_config import logger


async def create_keys(user_id: int, username: str, sub_id):
    async with DatabaseContextManager() as session_methods:
        try:
            sub_uuid = encode_numbers(user_id, sub_id)
            server_ips = await session_methods.servers.get_all_servers()
            for server in server_ips:
                if server.hidden == 1:
                    continue
                try:
                    base = BaseKeyManager(server.server_ip)
                    client_uuid, email, url_config = await base.add_client_to_inbound(
                        tg_id=str(user_id),
                        server_name=server.name,
                        sub_id=sub_uuid
                    )
                    if client_uuid is None:
                        continue

                except Exception as e:
                    await logger.log_error(f"Ошибка создания ключа на сервер {server.server_ip}", e)
            return True

        except Exception as e:
            await logger.log_error("Ошибка при поиске активного сервера или создании ключа", e)
            return False


def encode_numbers(user_id: int, sub_id: int, secret_key: str = "my_secret_key") -> str:
    data = f"{user_id},{sub_id}"

    checksum = hashlib.sha256((data + secret_key).encode()).hexdigest()[:8]

    combined = f"{data}|{checksum}"

    encoded = base64.b64encode(combined.encode()).decode()

    return encoded
