from database.context_manager import DatabaseContextManager
from handlers.services.key_create import BaseKeyManager
from logger.logging_config import logger
from models.models import Keys, NameApp


async def create_keys(user_id: int, username: str):
    keys = []

    async with DatabaseContextManager() as session_methods:
        try:
            server_ips = await session_methods.servers.get_all_servers()
            for server in server_ips:
                if server.hidden == 1:
                    continue
                try:
                    base = BaseKeyManager(server.server_ip)
                    client_uuid, email, url_config = await base.add_client_to_inbound(
                        tg_id=str(user_id),
                        username=username,
                        server_name=server.name
                    )
                    if client_uuid is None:
                        continue
                    key = await session_methods.keys.add_key(
                        Keys(
                            key_id=client_uuid,
                            key=url_config,
                            server_ip=server.server_ip,
                            email=email,
                            name_app=NameApp.VLESS
                        )
                    )
                    keys.append(key.id)
                except Exception as e:
                    await logger.log_error(f"Ошибка создания ключа на сервер {server.server_ip}", e)

            await session_methods.session.commit()
            return keys

        except Exception as e:
            await logger.log_error("Ошибка при поиске активного сервера или создании ключа", e)
            return False
