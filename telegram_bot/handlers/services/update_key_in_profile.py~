from database.context_manager import DatabaseContextManager
from handlers.services.key_create import VlessKeyManager, ShadowsocksKeyManager
from logger.logging_config import logger
from models.models import Keys, NameApp


async def update_profile():
    async with DatabaseContextManager() as session_methods:
        try:
            keys = await session_methods.keys.get_all_keys()
            keys = [key.id for key in keys if key.server_ip != "109.120.187.33"]
            subscriptions = await session_methods.subscription.get_subs()
            for sub in subscriptions:
                user = await session_methods.users.get_user(user_id=sub.user_id)
                if sub.key_ids not in keys:
                    try:
                        vless_manager = VlessKeyManager("109.120.187.33")
                        key, key_id, email = await vless_manager.manage_vless_key(
                            tg_id=str(sub.user_id),
                            username=user.username,
                            server_name=""
                        )

                        vless_key = await session_methods.keys.add_key(
                            Keys(
                                key_id=key_id,
                                key=key,
                                email=email,
                                server_ip=server.server_ip,
                                name_app=NameApp.VLESS
                            ))

                        keys.append(vless_key.id)

                        outline_manager = ShadowsocksKeyManager(server.server_ip)
                        outline_key, outline_key_id, email = await outline_manager.manage_shadowsocks_key(
                            tg_id=str(user_id),
                            username=username,
                            server_name=server.name
                        )
                        outline_key = await session_methods.keys.add_key(
                            Keys(
                                key_id=outline_key_id,
                                key=outline_key,
                                email=email,
                                server_ip=server.server_ip,
                                name_app=NameApp.OUTLINE
                            ))

                        keys.append(outline_key.id)
                    except Exception as e:
                        await logger.log_error(f"Ошибка создания ключа на сервер {server.server_ip}", e)

