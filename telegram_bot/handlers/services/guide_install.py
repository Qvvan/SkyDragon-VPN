from aiogram import Router
from aiogram.types import Message, CallbackQuery

from keyboards.kb_inline import InlineKeyboards, GuideSelectCallback
from keyboards.kb_reply.kb_inline import ReplyKeyboards
from lexicon.lexicon_ru import vpn_instructions_vless, vpn_instructions_outline, LEXICON_RU

router = Router()


@router.message(lambda message: message.text == "Android üì±")
async def android_handler(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é?",
        reply_markup=await InlineKeyboards.show_guide("Android")
    )


@router.message(lambda message: message.text == "iPhone üçè")
async def iphone_handler(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é?",
        reply_markup=await InlineKeyboards.show_guide("iPhone")
    )


@router.message(lambda message: message.text == "Windows üíª")
async def windows_macos_handler(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é?",
        reply_markup=await InlineKeyboards.show_guide("Windows")
    )


@router.message(lambda message: message.text == "MacOS üíª")
async def windows_macos_handler(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é?",
        reply_markup=await InlineKeyboards.show_guide("MacOS")
    )


@router.message(lambda message: message.text == "–¢–µ–ª–µ–≤–∏–∑–æ—Ä üì∫")
async def tv_handler(message: Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω—É–∂–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é?",
        reply_markup=await InlineKeyboards.show_guide("TV")
    )


@router.message(lambda message: message.text == "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚ùî")
async def connect_app(message: Message):
    await message.answer(
        text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∏–∂–µ üëá –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª —Ç–µ–±–µ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—èüîå',
        reply_markup=await ReplyKeyboards.get_menu_install_app()
    )


@router.callback_query(lambda c: c.data == 'back_to_device_selection')
async def back_to_device_selection(callback_query: CallbackQuery):
    await callback_query.message.answer(
        text=LEXICON_RU['choose_device'],
        reply_markup=await ReplyKeyboards.get_menu_install_app()
    )
    await callback_query.answer()


@router.callback_query(GuideSelectCallback.filter())
async def handle_guide_select(callback_query: CallbackQuery, callback_data: GuideSelectCallback):
    protocol = callback_data.name_app
    device = callback_data.name_oc
    await callback_query.answer()

    if protocol == 'vless':
        await callback_query.message.edit_text(
            text=vpn_instructions_vless[device],
            reply_markup=await InlineKeyboards.get_back_button_keyboard(callback="back_to_device_selection"),
            parse_mode='Markdown'
        )
    elif protocol == 'outline':
        await callback_query.message.edit_text(
            text=vpn_instructions_outline[device],
            reply_markup=await InlineKeyboards.get_back_button_keyboard(callback="back_to_device_selection"),
            parse_mode='Markdown'
        )
    elif protocol == 'back':
        await callback_query.message.answer(
            text='–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∏–∂–µ üëá –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª —Ç–µ–±–µ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—èüîå',
            reply_markup=await ReplyKeyboards.get_menu_install_app()
        )
    else:
        await callback_query.message.answer(
            text='–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )
