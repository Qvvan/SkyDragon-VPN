from datetime import datetime, timezone
from config_data.config import INN
from database.context_manager import DatabaseContextManager
from logger.logging_config import logger
import requests

# –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ7XCJhdXRoVHlwZVwiOlwiU01TXCIsXCJmaWRcIjoxMDAwNzI4MTA4NzIsXCJsb2dpblwiOlwiNzk2NDAzMDk3OTVcIixcImlkXCI6MjM0ODk1OTYsXCJkZXZpY2VJZFwiOlwiQXNWTU5VdjU4aWJSNzZaSHAxV05WXCIsXCJvcGVyYXRvcklkXCI6bnVsbCxcImNzdWRVc2VybmFtZVwiOm51bGwsXCJzZWdtZW50c1wiOltdLFwiZmlyc3RTZWdtZW50XCI6bnVsbH0iLCJleHAiOjE3Mzg0MTE4NDV9.gdgaQ_irVxNaBTGZBNaqqMp-n7MsO64WN6QLeIY_cKr3S8RcVnMnfr9jiOGqo2r3SuPaToZZfIi6GGfxblKUUA"
# URL API –§–ù–°
API_URL = "https://lknpd.nalog.ru/api/v1/income"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
HEADERS = {
    "Authorization": f"Bearer {TOKEN}",
    "Content-Type": "application/json",
    "Accept": "application/json"
}


async def generate_receipt(service_name, amount, duration_days, quantity=1, payment_type="CASH"):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ API –§–ù–° –∏ –ø–æ–ª—É—á–∞–µ—Ç UUID —á–µ–∫–∞ """

    now = datetime.now(timezone.utc).isoformat(timespec="seconds")

    # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "operationTime": now,
        "requestTime": now,
        "paymentType": payment_type,  # "CASH" (–Ω–∞–ª–∏—á–Ω—ã–µ) –∏–ª–∏ "TRANSFER" (–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É)
        "totalAmount": str(amount),
        "services": [
            {
                "name": service_name + " (" + str(duration_days) + " –¥–Ω–µ–∏ÃÜ)",
                "amount": amount,
                "quantity": quantity
            }
        ],
        "client": {
            "contactPhone": None,
            "displayName": None,
            "inn": None,
            "incomeType": "FROM_INDIVIDUAL"
        },
        "ignoreMaxTotalIncomeRestriction": False
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = requests.post(API_URL, headers=HEADERS, json=payload)

    if response.status_code == 200:
        data = response.json()
        receipt_uuid = data.get("approvedReceiptUuid")
        if receipt_uuid:
            await logger.log_info(f"‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! UUID: {receipt_uuid}")
            return receipt_uuid
        else:
            await logger.log_error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å UUID —á–µ–∫–∞", None)
    else:
        await logger.log_error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}", None)

    return None


async def get_receipt_link(receipt_uuid):
    """ –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ """
    if receipt_uuid:
        receipt_url = f"https://lknpd.nalog.ru/api/v1/receipt/{INN}/{receipt_uuid}/print"
        await logger.info(f"üìÑ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–∫: {receipt_url}")
        return receipt_url
    else:
        await logger.log_error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ —Å uuid: {receipt_uuid}", None)
        return None


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def create_receipt(service_name: str, amount: int, duration_days: int):
    receipt_uuid = await generate_receipt(service_name, amount, duration_days)

    if receipt_uuid:
        return await get_receipt_link(receipt_uuid)
