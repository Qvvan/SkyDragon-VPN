import logging
import traceback
from logging.handlers import RotatingFileHandler
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config_data import config


class CustomLogger:
    def __init__(self, name: str, log_file: str = "bot.log", max_file_size: int = 5 * 1024 * 1024, backup_count: int = 5):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)  # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Å–µ, –≤–∫–ª—é—á–∞—è DEBUG

        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        log_format = logging.Formatter(
            "%(levelname)s - %(asctime)s - [%(name)s] - [%(module)s.%(funcName)s] - line: %(lineno)d - %(message)s"
        )

        # –†–æ—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        file_handler = RotatingFileHandler(log_file, maxBytes=max_file_size, backupCount=backup_count)
        file_handler.setFormatter(log_format)
        file_handler.setLevel(logging.DEBUG)

        # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(log_format)
        console_handler.setLevel(logging.INFO)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

    @staticmethod
    async def send_safe_message(bot: Bot, chat_id: int, text: str, **kwargs):
        max_length = 4096
        if len(text) > max_length:
            for i in range(0, len(text), max_length):
                await bot.send_message(chat_id=chat_id, text=text[i:i + max_length], **kwargs)
        else:
            await bot.send_message(chat_id=chat_id, text=text, **kwargs)

    @staticmethod
    async def notify_group(message: str, error: Exception = None, keyboard=None):
        group_id = config.ERROR_GROUP_ID if error else config.INFO_GROUP_ID
        notification_type = "üö® –û—à–∏–±–∫–∞:\n" if error else "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        error_message = (
            f"\n\n–û—à–∏–±–∫–∞: {str(error)}\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n<pre>{traceback.format_exc()}</pre>"
            if error else ""
        )
        full_message = f"{notification_type}{message}{error_message}"

        async with Bot(
                token=config.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        ) as bot:
            await CustomLogger.send_safe_message(bot, chat_id=group_id, text=full_message, reply_markup=keyboard)

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def log_info(self, message: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        await self.info(message)  # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        await self.notify_group(message)

    async def log_error(self, message: str, error: Exception, keyboard=None):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        full_message = f"{message}. Error: {str(error)}"
        await self.error(message, error)  # –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        await self.notify_group(message, error, keyboard)

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def info(self, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        self.logger.info(message, stacklevel=3)

    async def debug(self, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        self.logger.debug(message, stacklevel=3)

    async def warning(self, message: str):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."""
        self.logger.warning(message, stacklevel=3)

    async def error(self, message: str, error: Exception = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
        full_message = f"{message}. Error: {str(error)}" if error else message
        self.logger.error(full_message, stacklevel=3, exc_info=bool(error))

    async def critical(self, message: str, error: Exception = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫."""
        full_message = f"{message}. Critical Error: {str(error)}" if error else message
        self.logger.critical(full_message, stacklevel=3, exc_info=bool(error))


# –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
logger = CustomLogger(__name__)
