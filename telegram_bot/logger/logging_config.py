import logging
import traceback
from logging.handlers import RotatingFileHandler

from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from config_data import config


class CustomLogger:
    def __init__(self, name: str, log_file: str = "bot.log", max_file_size: int = 5 * 1024 * 1024, backup_count: int = 5):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)  # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Å–µ, –≤–∫–ª—é—á–∞—è DEBUG

        # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
        log_format = logging.Formatter(
            "%(levelname)s - %(asctime)s - [%(name)s] - [%(module)s.%(funcName)s] - line: %(lineno)d - %(message)s"
        )

        # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = RotatingFileHandler(log_file, maxBytes=max_file_size, backupCount=backup_count)
        file_handler.setFormatter(log_format)
        file_handler.setLevel(logging.DEBUG)

        # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(log_format)
        console_handler.setLevel(logging.INFO)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫ –ª–æ–≥–≥–µ—Ä—É
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

    @staticmethod
    async def notify_group(message: str, error: Exception = None, keyboard=None):
        """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É (–æ—à–∏–±–∫–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)."""
        group_id = config.ERROR_GROUP_ID if error else config.INFO_GROUP_ID
        notification_type = "üö® –û—à–∏–±–∫–∞:\n" if error else "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = ""
        if error:
            error_message = f"\n\n–û—à–∏–±–∫–∞: {str(error)}\n" \
                            f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n<pre>{traceback.format_exc()}</pre>"

        async with Bot(
                token=config.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        ) as bot:
            await bot.send_message(
                chat_id=group_id,
                text=f"{notification_type}{message}{error_message}",
                reply_markup=keyboard
            )

    async def log_debug(self, message: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        self.logger.debug(message, stacklevel=3)

    async def log_info(self, message: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        self.logger.info(message, stacklevel=3)
        await self.notify_group(message)

    async def log_warning(self, message: str):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π."""
        self.logger.warning(message, stacklevel=3)

    async def log_error(self, message: str, error: Exception, keyboard=None):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        full_message = f"{message}. Error: {str(error)}"
        self.logger.error(full_message, exc_info=True, stacklevel=3)
        await self.notify_group(message, error, keyboard)

    async def log_critical(self, message: str, error: Exception, keyboard=None):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        full_message = f"{message}. Critical Error: {str(error)}"
        self.logger.critical(full_message, exc_info=True, stacklevel=3)
        await self.notify_group(message, error, keyboard)


# –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = CustomLogger(__name__)
