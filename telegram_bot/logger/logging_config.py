import html
import logging
import traceback
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from config_data import config


class CustomLogger:
    def __init__(self, name: str):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.INFO)

        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(logging.Formatter(
            "%(levelname)s - %(asctime)s - %(name)s - %(funcName)s - line: %(lineno)d - %(message)s"
        ))
        self.logger.addHandler(console_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
        file_handler = logging.FileHandler("app.log", encoding="utf-8")
        file_handler.setFormatter(logging.Formatter(
            "%(levelname)s - %(asctime)s - %(name)s - %(funcName)s - line: %(lineno)d - %(message)s"
        ))
        self.logger.addHandler(file_handler)

    @staticmethod
    async def notify_group(message: str, error: Exception = None, warning: bool = False, keyboard=None):
        """
        –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É (–æ—à–∏–±–∫–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è).
        """
        if error:
            group_id = config.ERROR_GROUP_ID
            notification_type = "üö® <b>–û—à–∏–±–∫–∞:</b>\n"
            error_message = f"<pre>{html.escape(traceback.format_exc())}</pre>"
        elif warning:
            group_id = config.ERROR_GROUP_ID or config.INFO_GROUP_ID  # –°–æ–∑–¥–∞–π—Ç–µ WARNING_GROUP_ID –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            notification_type = "‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</b>\n"
            error_message = ""
        else:
            group_id = config.INFO_GROUP_ID
            notification_type = "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            error_message = ""

        escaped_message = html.escape(message)
        async with Bot(
                token=config.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        ) as bot:
            await bot.send_message(
                chat_id=group_id,
                text=f"{notification_type}{escaped_message}{error_message}",
                reply_markup=keyboard
            )

    async def log_info(self, message: str, keyboard=None):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        self.logger.info(message)
        await self.notify_group(message, keyboard)

    async def log_error(self, message: str, error: Exception, keyboard=None):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        full_message = f"{message}. Error: {str(error)}"
        self.logger.error(full_message, exc_info=True)
        await self.notify_group(message, error=error, keyboard=keyboard)

    async def warning(self, message: str, keyboard=None):
        """–õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        self.logger.warning(message)
        await self.notify_group(message, warning=True, keyboard=keyboard)

    async def info(self, message):
        self.logger.info(message)

    async def error(self, message: str, error):
        full_message = f"{message}. Error: {str(error)}"
        self.logger.error(full_message, exc_info=True)


# –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
logger = CustomLogger(__name__)
