import asyncio
from datetime import datetime

from aiogram import Bot

from database.context_manager import DatabaseContextManager
from handlers.services.extend_latest_subscription import extend_user_subscription
from logger.logging_config import logger
from models.models import Gifts


async def gift_checker(bot: Bot):
    async with DatabaseContextManager() as session_methods:
        try:
            gifts = await session_methods.gifts.get_pending_gifts()
            for gift in gifts:
                try:
                    user = await session_methods.users.get_user_by_username(gift.receiver_username)
                    giver = await session_methods.users.get_user(gift.giver_id)
                    if user:
                        service = await session_methods.services.get_service_by_id(gift.service_id)
                        await session_methods.gifts.update_gift(
                            gift_id=gift.gift_id,
                            status="used",
                            activated_at=datetime.utcnow()
                        )
                        await extend_user_subscription(user.user_id, gift.receiver_username, service.duration_days,
                                                       session_methods)
                        await bot.send_message(user.user_id,
                                               f"üéÅ –í–∞–º –ø–æ–¥–∞—Ä–æ–∫! üéâ\n\n"
                                               f"–í–∞—à –¥—Ä—É–≥ {'@' + giver.username if giver.username else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'} —Ä–µ—à–∏–ª —Å–¥–µ–ª–∞—Ç—å –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑! ‚ú®\n\n"
                                               f"üí™ –ó–∞—â–∏—Ç–∞ {service.name}–∞ –Ω–∞ {service.duration_days} –¥–Ω–µ–π üõ°Ô∏è\n\n"
                                               f"üåê –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–π–¥–∏—Ç–µ –≤ /profile üîí"
                                               )
                        await logger.log_info(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{gift.receiver_username}\n"
                            f"–ü–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{giver.username}\n"
                            f"–ü–æ–¥–∞—Ä–æ–∫: {service.name} –Ω–∞ {service.duration_days} –¥–Ω–µ–π"
                        )
                except Exception as e:
                    await logger.log_error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–∞', e)
            await session_methods.session.commit()
        except Exception as e:
            await logger.log_error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤', e)
            return


async def run_gift_checker(bot: Bot):
    while True:
        try:
            await gift_checker(bot)
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ run_checker", e)

        await asyncio.sleep(10)
