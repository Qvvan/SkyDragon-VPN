import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.context_manager import DatabaseContextManager
from handlers.services.key_create import BaseKeyManager
from logger.logging_config import logger

router = Router()

CHAT_ADMIN_ID = 323993202
# –ü–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
NOTIFICATION_COOLDOWN_DAYS = 7
MIN_SUBSCRIPTION_AGE_HOURS = 8


async def check_connect(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é,
    –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è
    """
    async with DatabaseContextManager() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subs = await session.subscription.get_subs()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
        for sub in subs:
            await asyncio.sleep(1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à—ë–ª –ª–∏ –º–∏–Ω–∏–º—É–º 1 —á–∞—Å —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            if datetime.now() - sub.created_at < timedelta(hours=MIN_SUBSCRIPTION_AGE_HOURS):
                continue

            async with DatabaseContextManager() as session_methods:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                existing_notification = await session_methods.notifications.get_notification_by_subscription(
                    subscription_id=sub.subscription_id,
                    notification_type="no_connection"
                )

                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø–æ–¥–ø–∏—Å–∫—É
                if existing_notification and existing_notification.status == "active":
                    continue

                # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                if existing_notification:
                    cooldown_period = timedelta(days=NOTIFICATION_COOLDOWN_DAYS)
                    if datetime.now() - existing_notification.created_at < cooldown_period:
                        continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
                key_ids = sub.key_ids
                total_usage = 0

                for key_id in key_ids:
                    try:
                        key = await session_methods.keys.get_key_by_id(key_id)
                        if not key:
                            continue

                        key_info = await BaseKeyManager(server_ip=key.server_ip).get_inbound_by_id(key.key_id)
                        total = key_info.get("obj", {}).get("down", 0)
                        total_usage += total

                    except Exception as e:
                        await logger.warning(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key_id}\n"
                                               f"–°–µ—Ä–≤–µ—Ä: {key.server_ip}")
                        continue

                # –ï—Å–ª–∏ —Ç—Ä–∞—Ñ–∏–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if total_usage == 0:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                    await bot.send_message(
                        chat_id=CHAT_ADMIN_ID,
                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è\n"
                             f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {sub.user_id}\n"
                             f"ID –ø–æ–¥–ø–∏—Å–∫–∏: {sub.subscription_id}"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
                    support_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üßô‚Äç –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/skydragonsupport")],
                        [InlineKeyboardButton(
                            text="üêâ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                            callback_data="view_subs"
                        )]
                    ])

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
                    try:
                        await bot.send_message(
                            chat_id=sub.user_id,
                            text=(
                                "üîî *–ú—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –≤—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å–µ—Ä–≤–∏—Å—É.* üòä\n\n"
                                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –Ω–∞—à–∞ *—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞* —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–∂–µ—Ç! üíô\n\n"
                                "–í —Ä–∞–∑–¥–µ–ª–µ *¬´–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏¬ª* –≤—ã –Ω–∞–π–¥—ë—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                                "‚ñ™Ô∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏* –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é\n"
                                "‚ñ™Ô∏è *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ* –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n"
                                "‚ñ™Ô∏è *–î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏*\n\n"
                                "–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏! ü§ó"
                            ),
                            parse_mode="Markdown",
                            reply_markup=support_keyboard
                        )

                        await bot.send_message(
                            chat_id=CHAT_ADMIN_ID,
                            text=f"–£–≤–µ–¥–æ–º–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {sub.user_id}"
                        )
                    except Exception as e:
                        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub.user_id}", e)

                    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    if existing_notification:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await session_methods.notifications.update_notification(
                            notification_id=existing_notification.id,
                            status="active",
                            updated_at=datetime.now()
                        )
                    else:
                        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await session_methods.notifications.create_notification(
                            user_id=sub.user_id,
                            subscription_id=sub.subscription_id,
                            notification_type="no_connection",
                            message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sub.user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É {sub.subscription_id}, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è",
                            status="active",
                            created_at=datetime.now()
                        )


async def run_checker_connect(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    """
    while True:
        try:
            await check_connect(bot)
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", e)

        # –ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ 3600 —Å–µ–∫—É–Ω–¥ (1 —á–∞—Å) –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–¥–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å