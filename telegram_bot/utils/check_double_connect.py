import asyncio
from collections import defaultdict
from typing import List

from aiogram import Bot, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.context_manager import DatabaseContextManager
from handlers.services.key_create import BaseKeyManager
from logger.logging_config import logger

router = Router()

CHAT_ADMIN_ID = 323993202


async def check_multiple_connections(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã—è–≤–ª—è–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–∞–º –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö, –∫–ª—é—á–∞—Ö –∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É asyncio –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        online_users_by_server = {}
        key_data = {}
        subscription_keys = {}

        async with DatabaseContextManager() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
            servers = await session.servers.get_all_servers()

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            get_online_tasks = []
            for server in servers:
                task = fetch_online_users(server.server_ip)
                get_online_tasks.append(task)

            online_results = await asyncio.gather(*get_online_tasks)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
            for i, server in enumerate(servers):
                online_emails = online_results[i]
                if online_emails:
                    online_users_by_server[server.server_ip] = online_emails

            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã—Ö–æ–¥–∏–º
            if not any(online_users_by_server.values()):
                await logger.log_info("–ù–µ—Ç –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã
            all_keys = await session.keys.get_all_keys()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å email -> key_id
            email_to_key_id = {}
            for key in all_keys:
                if key.email:
                    email_to_key_id[key.email] = key.key_id

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–ª—é—á–∞–º–∏
            all_subscriptions = await session.subscription.get_subs()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å subscription_id -> [key_ids]
            for sub in all_subscriptions:
                if sub.key_ids and len(sub.key_ids) > 0:
                    subscription_keys[sub.subscription_id] = sub.key_ids

            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å key_id -> subscription_id
            key_to_subscription = {}
            for sub_id, key_ids in subscription_keys.items():
                for key_id in key_ids:
                    key_to_subscription[key_id] = sub_id

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –∏ —Å–µ—Ä–≤–µ—Ä–∞–º
            subscription_online_users = defaultdict(lambda: defaultdict(list))

            for server_ip, online_emails in online_users_by_server.items():
                for email in online_emails:
                    # –ù–∞—Ö–æ–¥–∏–º key_id –ø–æ email
                    key_id = email_to_key_id.get(email)
                    if not key_id:
                        continue

                    # –ù–∞—Ö–æ–¥–∏–º subscription_id –ø–æ key_id
                    sub_id = key_to_subscription.get(key_id)
                    if not sub_id:
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –∏ email –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
                    subscription_online_users[sub_id][server_ip].append(email)

            # –í—ã—è–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
            issues_found = False

            for sub_id, server_data in subscription_online_users.items():
                # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                total_connections = sum(len(emails) for emails in server_data.values())

                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                if total_connections > 1:
                    issues_found = True

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                    message = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!\n\n"
                    message += f"–ü–æ–¥–ø–∏—Å–∫–∞ ID: {sub_id}\n"
                    message += f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {total_connections}\n\n"
                    message += "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:\n"

                    for server_ip, emails in server_data.items():
                        message += f"\nüñ• –°–µ—Ä–≤–µ—Ä: {server_ip}\n"
                        for email in emails:
                            key_id = email_to_key_id.get(email, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á")
                            message += f"  ‚Ä¢ Email: {email} (Key ID: {key_id})\n"

                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    try:
                        sub_info = await session.subscription.get_subscription_by_id(sub_id)
                        if sub_info:
                            user_id = sub_info.get('user_id')
                            message += f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}\n"
                    except Exception as e:
                        await logger.warning(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {sub_id}: {str(e)}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                    try:
                        await bot.send_message(CHAT_ADMIN_ID, message, parse_mode="HTML")
                        await logger.log_info(
                            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {sub_id}")
                    except Exception as e:
                        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")

            if not issues_found:
                await logger.log_info("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", e)


async def fetch_online_users(server_ip: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    """
    try:
        online_data = await BaseKeyManager(server_ip=server_ip).get_online_users()
        if online_data and online_data.get("success") and online_data.get("obj"):
            return online_data.get("obj", [])
        return []
    except Exception as e:
        await logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}: {str(e)}")
        return []


async def run_multiple_connections_checker(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    """
    while True:
        try:
            await bot.send_message(chat_id=CHAT_ADMIN_ID, text="–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            await check_multiple_connections(bot)
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", e)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        await asyncio.sleep(900)
