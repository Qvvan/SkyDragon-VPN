import asyncio
from collections import defaultdict
from typing import Dict, List, Set, Tuple

from aiogram import Bot, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from database.context_manager import DatabaseContextManager
from handlers.services.key_create import BaseKeyManager
from logger.logging_config import logger

router = Router()

CHAT_ADMIN_ID = 323993202


async def check_multiple_connections(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤—ã—è–≤–ª—è–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–∞–º –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        online_users_by_server = {}

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        subscription_user_info = {}

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–∞—Ö
        key_info = {}

        async with DatabaseContextManager() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
            servers = await session.servers.get_all_servers()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å server_ip -> server_name –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            server_names = {server.server_ip: server.name for server in servers}

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            get_online_tasks = []
            for server in servers:
                task = fetch_online_users(server.server_ip)
                get_online_tasks.append((server.server_ip, task))

            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            for server_ip, task in get_online_tasks:
                try:
                    online_emails = await task
                    if online_emails:
                        online_users_by_server[server_ip] = online_emails
                except Exception as e:
                    await logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}: {str(e)}")

            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã—Ö–æ–¥–∏–º
            if not any(online_users_by_server.values()):
                await logger.log_info("–ù–µ—Ç –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã
            all_keys = await session.keys.get_all_keys()

            # –°–ª–æ–≤–∞—Ä—å email -> –∫–ª—é—á (–æ–±—ä–µ–∫—Ç)
            email_to_key = {}
            # –°–ª–æ–≤–∞—Ä—å key_id -> (server_ip, email)
            key_info = {}

            for key in all_keys:
                if key.email:
                    email_to_key[key.email] = key
                    key_info[key.key_id] = (key.server_ip, key.email, key.id)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–ª—é—á–∞–º–∏
            all_subscriptions = await session.subscription.get_subs()

            # –°–æ–∑–¥–∞–µ–º –º–∞–ø—É key_id -> subscription_id
            key_to_subscription = {}
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø—É subscription_id -> user_id
            subscription_to_user = {}
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å subscription_id -> [key_ids]
            subscription_keys = {}

            for sub in all_subscriptions:
                if hasattr(sub, 'user_id'):
                    subscription_to_user[sub.subscription_id] = sub.user_id

                if hasattr(sub, 'key_ids') and sub.key_ids:
                    subscription_keys[sub.subscription_id] = sub.key_ids
                    for key_id in sub.key_ids:
                        key_to_subscription[key_id] = sub.subscription_id

            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
            # user_id -> {subscription_id -> {server_ip -> [email]}}
            user_connections = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            for server_ip, online_emails in online_users_by_server.items():
                for email in online_emails:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
                    key = email_to_key.get(email)
                    if not key:
                        continue

                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∫–ª—é—á—É
                    sub_id = key_to_subscription.get(key.key_id)
                    if not sub_id:
                        continue

                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                    user_id = subscription_to_user.get(sub_id)
                    if not user_id:
                        continue

                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    user_connections[user_id][sub_id][server_ip].append(email)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            issues_found = False

            for user_id, user_data in user_connections.items():
                for sub_id, server_data in user_data.items():
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                    total_connections = sum(len(emails) for emails in server_data.values())

                    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if total_connections > 1:
                        issues_found = True

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
                        message = f"‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!</b>\n\n"
                        message += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:</b> {user_id}\n"
                        message += f"üîë <b>–ü–æ–¥–ø–∏—Å–∫–∞ ID:</b> {sub_id}\n"
                        message += f"üìä <b>–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:</b> {total_connections}\n\n"
                        message += "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º:</b>\n"

                        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
                        for server_ip, emails in server_data.items():
                            server_name = server_names.get(server_ip, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä")
                            message += f"\nüñ• <b>–°–µ—Ä–≤–µ—Ä:</b> {server_name} ({server_ip})\n"

                            for email in emails:
                                key = email_to_key.get(email)
                                if key:
                                    message += f"  ‚Ä¢ Email: <code>{email}</code>\n"
                                    message += f"    Key ID (–ø–∞–Ω–µ–ª—å): <code>{key.key_id}</code>\n"
                                    message += f"    Key ID (–ë–î): <code>{key.id}</code>\n"

                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏",
                                                  callback_data=f"deactivate_keys:{user_id}:{sub_id}")],
                            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                                  callback_data=f"warn_user:{user_id}:{sub_id}")]
                        ])

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                        try:
                            await bot.send_message(CHAT_ADMIN_ID, message, parse_mode="HTML", reply_markup=keyboard)
                            await logger.log_info(
                                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–æ–¥–ø–∏—Å–∫–∞ {sub_id}")
                        except Exception as e:
                            await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {str(e)}")

            if not issues_found:
                await logger.log_info("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {str(e)}", e)


async def fetch_online_users(server_ip: str) -> List[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    """
    try:
        online_data = await BaseKeyManager(server_ip=server_ip).get_online_users()
        if online_data and online_data.get("success") and online_data.get("obj"):
            return online_data.get("obj", [])
        return []
    except Exception as e:
        await logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞ {server_ip}: {str(e)}")
        return []


async def run_multiple_connections_checker(bot: Bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    """
    while True:
        try:
            await check_multiple_connections(bot)
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π", e)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç - –±–æ–ª–µ–µ —á–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
        await asyncio.sleep(600)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±–µ–∫–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data.startswith("deactivate_keys:"))
async def deactivate_keys_handler(callback_query: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ subscription_id –∏–∑ callback_data
        _, user_id, sub_id = callback_query.data.split(":")
        user_id = int(user_id)
        sub_id = int(sub_id)

        async with DatabaseContextManager() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            subscription = await session.subscription.get_subscription_by_id(sub_id)
            if not subscription:
                await callback_query.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            key_ids = subscription.get('key_ids', [])
            if not key_ids:
                await callback_query.answer("–£ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π!")
                return

            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏
            deactivated_count = 0
            for key_id in key_ids:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –±–∞–∑—ã
                key = await session.keys.get_key_by_key_id(key_id)
                if key:
                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
                    await session.keys.update_key(key.id, status='inactive')
                    deactivated_count += 1

            await session.session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    user_id,
                    "‚ùóÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–∑-–∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞. "
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            except Exception as e:
                await logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫
            await callback_query.answer(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {deactivated_count} –∫–ª—é—á–µ–π!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.edit_text(
                callback_query.message.text + f"\n\n‚úÖ <b>–ö–ª—é—á–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã: {deactivated_count}</b>",
                parse_mode="HTML"
            )

            await logger.log_info(
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª {deactivated_count} –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–æ–¥–ø–∏—Å–∫–∞ {sub_id}")

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–µ–π: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–µ–π!")


@router.callback_query(lambda c: c.data.startswith("warn_user:"))
async def warn_user_handler(callback_query: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ subscription_id –∏–∑ callback_data
        _, user_id, sub_id = callback_query.data.split(":")
        user_id = int(user_id)
        sub_id = int(sub_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                chat_id=CHAT_ADMIN_ID,
                text="‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n"
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π "
                "–≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π. "
                "–í —Å–ª—É—á–∞–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π, –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            await callback_query.answer("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.edit_text(
                callback_query.message.text + "\n\n‚úÖ <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>",
                parse_mode="HTML",
                reply_markup=callback_query.message.reply_markup
            )

            await logger.log_info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –ø–æ–¥–ø–∏—Å–∫–∞ {sub_id}")

        except Exception as e:
            await logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

    except Exception as e:
        await logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {str(e)}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!")