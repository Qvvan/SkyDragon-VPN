import asyncio
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from database.context_manager import DatabaseContextManager
from logger.logging_config import logger


async def trial_checker(bot: Bot):
    async with DatabaseContextManager() as session_methods:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = await session_methods.users.get_all_users()
            if not users:
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π)
            recent_period = datetime.utcnow() - timedelta(days=7)

            for user in users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    if not user.trial_used and user.created_at and user.created_at >= recent_period and not user.reminder_trial_sub:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        try:
                            await bot.send_message(
                                chat_id=user.user_id,
                                text=(
                                    f"–ü—Ä–∏–≤–µ—Ç, {user.username or '–¥—Ä—É–≥'}! üòä\n\n"
                                    f"–¢—ã –µ—â—ë –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥? –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç–æ! üéâ\n"
                                    f"–í—Å–µ–≥–æ –ø–∞—Ä–∞ –∫–ª–∏–∫–æ–≤ ‚Äî –∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—Å—ë –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!"
                                ),
                                reply_markup=InlineKeyboardMarkup(
                                    inline_keyboard=[
                                        [
                                            InlineKeyboardButton(
                                                text="‚öîÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                                                callback_data="activate_trial"
                                            )
                                        ]
                                    ]
                                )
                            )
                        except:
                            pass
                        await session_methods.users.update_user(user.user_id, reminder_trial_sub=True)
                        await logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
                                          f"ID: {user.user_id}\nUsername: @{user.username}")
                except Exception as e:
                    await logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞:", e)
                    await logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}:", e)
        except Exception as e:
            await logger.error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ trial_checker:", e)
            await logger.log_error("–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ trial_checker", e)


async def run_trial_checker(bot: Bot):
    while True:
        try:
            await trial_checker(bot)
        except Exception as e:
            await logger.log_error("–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ run_checker", e)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 24 —á–∞—Å–∞
        await asyncio.sleep(86400)
