import base64
from typing import Optional

import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

from ssh_tunnel_manager import SSHTunnelManager


class BaseKeyManager:
    def __init__(self, server_ip):
        self.server_ip = server_ip
        self.tunnel_manager = SSHTunnelManager()

        # Настраиваем сессию с retry политикой
        self.session = requests.Session()
        retry_strategy = Retry(
            total=3,
            backoff_factor=1,
            status_forcelist=[500, 502, 503, 504]
        )
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)

    def _get_sub_3x_ui(self, sub_id: str) -> Optional[str]:
        """Синхронно получает конфигурацию с сервера через туннель"""
        tunnel_port = self.tunnel_manager.get_tunnel_port(self.server_ip)
        if not tunnel_port:
            print(f"❌ Туннель недоступен для {self.server_ip}")
            return None

        url = f"http://localhost:{tunnel_port}/sub/{sub_id}"

        try:
            # Используем HTTP вместо HTTPS для localhost туннеля
            response = self.session.get(url, timeout=15, verify=False)

            if response.status_code == 200:
                base64_response = response.text
                try:
                    decoded_configs = base64.b64decode(base64_response).decode('utf-8')
                    print(f"✅ Конфигурация получена с {self.server_ip}")
                    return decoded_configs
                except Exception as decode_error:
                    print(f"⚠️ Ошибка декодирования base64: {decode_error}")
                    return base64_response
            else:
                print(f"❌ HTTP {response.status_code} для {url}")
                return None

        except requests.exceptions.RequestException as e:
            print(f"❌ Ошибка HTTP запроса к {self.server_ip}: {e}")
            return None
        except Exception as e:
            print(f"❌ Неожиданная ошибка при обращении к {self.server_ip}: {e}")
            return None

    def __del__(self):
        """Закрываем сессию при удалении объекта"""
        if hasattr(self, 'session'):
            self.session.close()